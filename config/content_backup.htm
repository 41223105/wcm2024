<h1>About</h1>
<p>網頁: <a href="https://41223105.github.io/wcm2024/">https://41223105.github.io/wcm2024/</a></p>
<p>網誌: <a href="https://41223105.github.io/wcm2024/blog">https://41223105.github.io/wcm2024/blog</a></p>
<p>簡報: <a href="https://41223105.github.io/wcm2024/">https://41223105.github.io/wcm2024/</a></p>
<p>倉儲: <a href="https://github.com/41223105/wcm2024">https://github.com/41223105/wcm2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<h1>homework</h1>
<h2>W1</h2>
<p><span>四技 WCM 第一週課程, 主要引導學員登入 MS Online 並建立 Github 帳號, 以及利用 cmsimde_site 作為 Template 建立個人課程網站。</span></p>
<p><span>上學期已完成此步驟</span></p>
<h2>W2</h2>
<p><span>四技 WCM 第二週課程, 主要確認各學員是否完成 Github 中個人倉儲與網站的建立, 並且除了 Replit 還導入利用 Github Codespaces 維護個人與分組網站。</span></p>
<p><em><strong>建立個人課程</strong></em></p>
<ol>
<li>登入 Github</li>
<li>連結到<span> </span><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></li>
<li>利用 "Use this template" 下方的 "Create a new repository" 建立名稱為 wcm2024 的倉儲</li>
<li>在 wcm2024 倉儲上方的 Settings 設定頁面中, 左方 Pages 中的 Branch 分支區域, 選擇將 main 分支存為網頁的 root 根目錄</li>
<li>等 wcm2024 的倉儲 Github Pages 轉檔完成後, 可以看到 commits 提交區的綠色勾勾, 就完成網址為 https://帳號.github.io/wcm2024 的個人課程網站</li>
</ol>
<p>利用上述步驟完成的倉儲內容, 同時帶有以 Python 編寫的動態網站程式, 以及位於 content 目錄中的靜態網頁資料.</p>
<p><em><strong></strong></em></p>
<h2>W3</h2>
<p><em><strong>利用 Github Classroom 建立分組網站 </strong></em></p>
<p>在 mdewcm2024 帳號下, 期中分組作業名稱為 1a, 若第一組組長建立 Team 名稱為 midag1, 則分組倉儲名稱將為 1a-midag1, 而五專課程則使用 5j-midjg1, 需要如此命名作業與分組倉儲名稱的原因是, 在 Github Classroom 同一個 organization 名稱下 (即 wcm2024), 各班作業名稱必須有所區別, 而且各分組 Team 名稱也不能相同.</p>
<p><em><strong>利用 Github Codespaces 維護倉儲</strong></em></p>
<p>如前所述, 使用 Replit 管理分組網站, 必須採動態建立 .ssh 目錄中的私鑰與 config, 過程比較複雜, 但若採用 Github Codespaces, 則可以在登入 Github 帳號下, 管理該帳號所有授權的倉儲, 包括分組倉儲與網站, 唯一的限制是每個月只能使用 120 core hours。</p>
<p><em><strong>常用的 git 指令</strong></em></p>
<p>git 的新增、提交與推送指令:</p>
<p>git add . git commit -m "說明字串" git push</p>
<p>使用 git add . 表示要認列所進行的全部改版內容, git commit -m 執行之前, 若在近端使用, 必須先行設定 git config, 將 home_ipv6 目錄下的 .gitconfig 中明確列出改版者的身分, 其中包括:</p>
<p>git config --global user.name "提交者的 github 帳號名稱"</p>
<p>git config --global user.email "提交者在 github 所登錄的 email address"</p>
<p>使用者也可以利用 git version 查詢目前所使用的 git 版本.</p>
<p>git status 通常用來查核目前近端的改版狀況, 例如: 是否與遠端倉儲同步, 或者遠端倉儲已經有了新版本.</p>
<p>若遠端倉儲已經有新的版本, 則在 git push 之前, 必須設法取下遠端資料進行合併後, 才能再提交新的版本並推送到遠端.</p>
<p>git pull = git fetch + git merge</p>
<p>由於要將各組員的 wcm2024 設定為各分組倉儲的子模組, 因此必須利用 git submodule add 以各組員的學號作為子目錄名稱, 利用下列指令, 將組員倉儲新增為分組倉儲的子模組:</p>
<p>git submodule add 倉儲網址 子目錄</p>
<p>若只要取下倉儲的主要內容, 可以使用下列指令:</p>
<p>git clone 倉儲網址_協定.git 指定目錄與否</p>
<p>若要取下帶有子模組的倉儲, 且可能該子模組還有設定其他子模組, 則必須要加上 --recurse-submodules:</p>
<p>git clone --recurse-submodules 倉儲網址_協定.git 指定目錄與否</p>
<p>說明<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EZbnYCWfEylAmXhpOqXWgZUBMxerlNYRgQsBBjZAQ90lmg?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;e=8nGXOz">如何將組員的個人倉儲納入分組倉儲成為子模組</a></p>
<p>說明<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EUlbUzMAyBFHrHX7bLPRKzsB3L-T-D413BPuH6pMSEZmjg?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;e=HjIQab">如何在 Replit 維護分組倉儲</a></p>
<h2>W4</h2>
<p><span>四技 WCM 第四週課程, 複習前三週的課程內容, 並且介紹 git 與 cmsimde 的相關用法。</span></p>
<p><em><strong>Replit 建立分組倉儲權限</strong></em></p>
<p>由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應, 因此若將分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號), 其中的 config 內容為:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">Host github.com
User git
Hostname github.com
</pre>
<p>而 Host 的設定與 Windows putty 中的 session 名稱相同, 配合使用的 ssh 連線指令將會是:</p>
<p>git clone --recurse-submodules git@github.com:mdewcm2024/分組倉儲名稱.git</p>
<p>當使用者完成 /home/runner/.ssh 目錄中的 id_rsa 與 config 建立後, Replit 會定期刪除免費用戶的 .ssh 目錄, 因此使用者必須將此兩個檔案存至隨身碟, 並在需要對分組倉儲改版時, 啟動分組倉儲的動態網站, 將隨身碟中的 id_rsa 與 config 檔案, upload 到分組倉儲的 downloads 目錄後, 再利用 ssh.py 的執行, 將 id_rsa 與 config 移動到 /home/runner/.ssh 目錄中. 也就是執行:python3 ssh.py</p>
<p><span>ssh.py 程式內容如下:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">import os
if not os.path.exists("/home/runner/.ssh"): 
    os.makedirs("/home/runner/.ssh") 
os.system("mv ./downloads/id_rsa.txt /home/runner/.ssh/id_rsa")
os.system("mv ./downloads/config.txt /home/runner/.ssh/config")
os.system("chmod og-rwx /home/runner/.ssh/id_rsa")</pre>
<p></p>
<p><em><strong>Git Tutorial</strong></em></p>
<p>第5組<span>分組網站</span> <a href="https://mdewcm2024.github.io/1a-ag5">1a-ag5</a><span> (</span><a href="https://github.com/mdewcm2024/1a-ag5">repo</a><span>)</span></p>
<h2>W5</h2>
<p><span>四技 WCM 第五週課程, 以 iframe 嵌入先前的教學影片, 並摘要各影片內容。</span></p>
<p><span></span></p>
<h2>W6</h2>
<p><strong>四技網際內容管理第六週實習操作</strong></p>
<p>請根據第六週的網誌, 實際操作下列兩項議題:</p>
<ol>
<li>根據您的專業, 就 git 的使用, 從與 ChatGPT 的對話, 將內容整理到個人的第六網誌, 其中包含: git 的發展歷史, 創作人的相關履歷, 以及一般相同專業人士如何利用  git 解決內容管理問題?</li>
<li>假如要在 Windows 實際 demo git client 與 git server, 該如何進行? 請將相關操作流程整理至個人第六週網誌中.</li>
</ol>
<p><strong></strong></p>
<p><em><strong>git 的發展歷史</strong></em></p>
<p>Git 的發展歷史可以追溯到2005年，當時Linux的創始人Linus Torvalds為了管理Linux核心開發而創建了Git版本控制系統。以下是Git的主要發展歷程：</p>
<ol>
<li>
<p><strong>2005年</strong>：Git 誕生。Linus Torvalds開始編寫 Git 作為管理 Linux 內核代碼的工具。他受到 BitKeeper 版本控制系統的啟發，但對於一些限制感到不滿，因此決定創建自己的版本控制系統。</p>
</li>
<li>
<p><strong>2005年4月</strong>：Git 開始在 Linux 內核開發中使用。Torvalds將Linux內核的版本控制從BitKeeper轉移到Git。</p>
</li>
<li>
<p><strong>2005年6月</strong>：Git 1.0版本發布。這是Git的首個正式穩定版本，標誌著Git正式進入廣泛使用的階段。</p>
</li>
<li>
<p><strong>2008年</strong>：GitHub成立。GitHub是一個基於Git的代碼托管平台，為開發者提供了方便的代碼存儲、版本控制和協作功能。GitHub的出現進一步推動了Git的普及和發展。</p>
</li>
<li>
<p><strong>2012年</strong>：Git 1.8.0版本發布。這是Git的一個重要版本，引入了許多新特性和改進，包括重寫的分支合併策略、子模組支持等。</p>
</li>
<li>
<p><strong>2016年</strong>：Git 2.0版本發布。這個版本引入了一些重要的改進和更新，包括重新設計的設置系統、忽略規則的改進等。</p>
</li>
<li>
<p><strong>至今</strong>：Git 不斷進行著更新和改進。每個新版本都帶來了更多的功能、性能優化和使用體驗改進，使得Git在軟件開發領域中得到廣泛應用。</p>
</li>
</ol>
<p><em><strong>git創作人Linus Torvalds的相關履歷</strong></em></p>
<p>Linus Torvalds，Git 的創始人，是一位著名的計算機科學家和軟件工程師，最著名的貢獻是 Linux 操作系統的開發。以下是他的一些相關履歷：</p>
<ol>
<li>
<p><strong>早年生活和教育</strong>：</p>
<ul>
<li>Linus Benedict Torvalds 生於1969年12月28日，出生於芬蘭赫爾辛基。</li>
<li>他在赫爾辛基大學學習計算機科學，於1996年獲得碩士學位。</li>
</ul>
</li>
<li>
<p><strong>Linux 的創建</strong>：</p>
<ul>
<li>在大學期間，他開始對操作系統感興趣，並開始編寫一個新的操作系統的核心。</li>
<li>1991年，他發布了 Linux 核心的第一個版本，這成為了 Linux 操作系統的開端。</li>
</ul>
</li>
<li>
<p><strong>Git 的誕生</strong>：</p>
<ul>
<li>2005年，Torvalds為了管理 Linux 內核代碼的開發而創建了 Git 版本控制系統。</li>
<li>他受到 BitKeeper 版本控制系統的啟發，但對於一些限制感到不滿，因此決定創建自己的版本控制系統。</li>
</ul>
</li>
<li>
<p><strong>軟件工程師生涯</strong>：</p>
<ul>
<li>Torvalds 是一位極具影響力的軟件工程師，除了 Linux 和 Git 外，他還參與了許多其他開源項目。</li>
<li>他經常參加各種開發者活動和會議，並在開源社區中發揮著積極的作用。</li>
</ul>
</li>
<li>
<p><strong>榮譽與獎項</strong>：</p>
<ul>
<li>2000年，他被《時代》雜誌列為「互聯網最重要的人物之一」。</li>
<li>2012年，他獲得了芬蘭國家技術獎。</li>
<li>他還獲得了許多其他獎項和榮譽，以表彰他在計算機科學領域的重要貢獻。</li>
</ul>
</li>
</ol>
<p></p>
<p><span><em><strong>一般相同專業人士如何利用 git 解決內容管理問題</strong><strong>?</strong></em></span></p>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-hzcqg-79elbk h-full">
<div class="react-scroll-to-bottom--css-hzcqg-1n7m0yu">
<div class="flex flex-col text-sm pb-9">
<div class="w-full text-token-text-primary" data-testid="conversation-turn-11" dir="auto">
<div class="px-4 py-2 justify-center text-base md:gap-6 m-auto">
<div class="flex flex-1 text-base mx-auto gap-3 juice:gap-4 juice:md:gap-6 md:px-5 lg:px-1 xl:px-5 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]">
<div class="relative flex w-full flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="47a7de38-f58a-4a4b-adb2-fb8e99233296" dir="auto">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>對於一般的專業人士，尤其是軟件開發人員和其他技術人員來說，Git 是一個強大的工具，可以幫助他們解決內容管理問題。以下是一些一般相同專業人士如何利用 Git 解決內容管理問題的方式：</p>
<ol>
<li>
<p><strong>版本控制</strong>：Git 讓你能夠跟蹤和管理內容的各個版本。這對於文檔、代碼、配置文件等各種類型的內容都非常有用。你可以隨時回溯到之前的版本，比如當需要查找錯誤的起源時，或者需要恢復到之前的穩定狀態時。</p>
</li>
<li>
<p><strong>分支和合併</strong>：Git 允許創建分支來獨立開發新功能或修復問題，而不會影響主要的開發分支。這樣可以同時進行多個功能的開發，而不會相互干擾。然後，你可以使用合併操作將這些分支合併回主要的開發線上。</p>
</li>
<li>
<p><strong>協作</strong>：Git 提供了便捷的方式讓多個人協作開發同一個項目。通過將代碼庫克隆到本地，進行修改後再推送回原始代碼庫，不同團隊成員可以輕鬆地共享和合作。這對於團隊內部或跨團隊之間的合作都非常有用。</p>
</li>
<li>
<p><strong>代碼審查</strong>：Git 可以與代碼審查工具結合使用，這使得團隊能夠進行代碼審查，從而提高代碼質量和可讀性。通過在代碼庫中創建分支，然後將分支中的代碼發送給同事進行審查，可以有效地進行代碼審查流程。</p>
</li>
<li>
<p><strong>自動化流程</strong>：利用 Git 的 Hooks 功能，可以實現自動化的流程。例如，你可以設置 pre-commit hook，在提交代碼之前運行測試，從而確保提交的代碼是合格的。這樣可以提高代碼的質量並減少錯誤。</p>
</li>
</ol>
<p>Git 是一個非常強大且靈活的工具，可以滿足各種內容管理需求。通過充分利用 Git 的功能，專業人士可以更有效地管理和協作開發項目，提高生產力和內容質量。</p>
<p></p>
<span><span><em><strong>假</strong><strong>如要在 Windows 實際 demo git client 與 git server, 該如何進行?</strong></em></span></span><span><em><strong><br/></strong></em></span></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<p>在 Windows 上進行 Git 客戶端和伺服器的實際演示相對容易，以下是一個簡單的步驟：</p>
<p><em><strong>建立 Git 伺服器</strong></em></p>
<ol>
<li style="text-align: left;">
<p><strong>安裝 Git</strong>： 如果尚未安裝 Git，請在 Windows 上下載並安裝 Git。你可以在 <a href="https://git-scm.com/" target="_new">Git 官方網站</a> 上找到最新版本。</p>
</li>
<li style="text-align: left;">
<p><strong>創建 Git 儲存庫</strong>： 選擇一個文件夾作為你的 Git 儲存庫，然後右鍵單擊該文件夾，選擇“Git Bash Here”以打開 Git Bash。</p>
</li>
<li>
<p style="text-align: left;"><strong>初始化儲存庫</strong>： 在 Git Bash 中，運行以下命令初始化儲存庫：</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git init --bare</pre>
<ol>
<li style="text-align: left;">
<p>這將創建一個裸儲存庫，該儲存庫可用於克隆和推送代碼。</p>
</li>
<li>
<p style="text-align: left;"><strong>設置遠程連接</strong>： 在你的演示中，你需要告訴客戶端如何連接到此伺服器。假設你的伺服器位於本地，遠程 URL 可能是類似 <code>file:///C:/path/to/your/repository.git</code> 的格式。</p>
</li>
</ol>
<em><strong></strong></em></li>
</ol>
<p><em><strong>使用 Git 客戶端</strong></em></p>
<ol>
<li style="text-align: left;">
<p><strong>安裝 Git 客戶端</strong>： 如果尚未安裝 Git，請在 Windows 上下載並安裝 Git，就像在建立伺服器時所做的那樣。</p>
</li>
<li style="text-align: left;">
<p><strong>克隆儲存庫</strong>： 打開命令提示符或 Git Bash，然後使用 <code>git clone</code> 命令克隆剛剛建立的儲存庫：</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git clone file:///C:/path/to/your/repository.git</pre>
<p></p>
</li>
<li style="text-align: left;">
<p><strong>進行修改</strong>： 在剛剛克隆的儲存庫中進行一些修改，比如新增文件、修改文件等。</p>
</li>
<li style="text-align: left;">
<p><strong>提交變更</strong>： 使用以下命令提交你的變更：</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git add .
git commit -m "Your commit message"</pre>
<p></p>
</li>
<li><strong>推送到伺服器</strong><span><span>： 使用以下命令將你的變更推送到伺服器：</span></span>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git push origin master</pre>
注意，這裡假設你將主分支命名為 <code>master</code>。如果你使用的是不同的分支名稱，請將其替換為適當的分支名稱。
<p style="text-align: left;">這樣就完成了一個簡單的 Git 客戶端和伺服器的實際演示。這個示例可以讓你展示 Git 的基本功能，包括克隆、提交和推送。</p>
</li>
</ol>
<p></p>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-hzcqg-79elbk h-full">
<div class="react-scroll-to-bottom--css-hzcqg-1n7m0yu">
<div>
<div class="flex flex-col text-sm pb-9">
<div class="w-full text-token-text-primary" data-testid="conversation-turn-11" dir="auto">
<div class="px-4 py-2 justify-center text-base md:gap-6 m-auto">
<div class="flex flex-1 text-base mx-auto gap-3 juice:gap-4 juice:md:gap-6 md:px-5 lg:px-1 xl:px-5 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]">
<div class="relative flex w-full flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<h1 class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="47a7de38-f58a-4a4b-adb2-fb8e99233296" dir="auto">期中課程整理</h1>
<h2>網頁式內容管理</h2>
<p>Q1:如何建立 Github 上的網站?Q2:如何管理內容?Q3: 如何建立章節式網站?Q4:能放入甚麼多媒體內容?Q5:靜態圖文?Q6:動態圖文?Q7:線上遊戲?Q8:3D 零組件展示?Q9:如何建立網頁系統中的網誌?Q10:如何建立網頁系統中的簡報?</p>
<p>A1:<span> GitHub 上建立網站可以使用 GitHub Pages ，先創立一個儲存庫，名稱為username.github.io，在存儲庫中創建一個名為「index.html」的 HTML 文件，用於構建你的網站主頁。將網站的代碼添加到 index.html 文件中，然後把它推到 GitHub 存儲庫。</span></p>
<p><span>A2: GitHub 上管理網站內容通常使用版本控制工具 Git。可以在本地創建一個 Git 存儲庫，將網站代碼下載到本地，然後在本地修改和更新網站內容。完成修改後，使用 Git 將更改推送到 GitHub 存儲庫。另外，可以使用分支（Branches）來開發新功能或進行實驗，然後將分支合併（Merge）到主分支（通常是 master 或 main）中。</span></p>
<p><span>A3:建立章節式網站可以使用靜態網站生成器，如Replit、Codespaces或Gitpods等。首先，需要選擇一個適合你需求的生成器，然後在本地開發環境中創建你的網站再使用生成器提供的模板和功能來創建不同的章節和內容頁面，組織你的網站內容。完成編輯後，使用生成器將網站生成為靜態文件，然後將這些文件推送到GitHub存儲庫中。最後，你的章節式網站將通過GitHub Pages或其他靜態網站托管服務進行部署，讓其他人可以訪問和瀏覽你的網站。</span></p>
<p><span>A4:</span></p>
<p><span>1.圖片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。</span></p>
<p><span>2.影片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。</span></p>
<p>3.音頻:<span>嵌入音樂或語音文件，如Podcast等，讓讀者可以聆聽音頻內容。</span></p>
<p><span>4.地圖:嵌入地圖服務，如Google Maps，以展示地理位置或路線信息。</span></p>
<p><span>5.表格:使用HTML或Markdown格式來創建和展示表格內容，以整理和呈現數據。</span></p>
<p><span>6.圖表和圖形:使用JavaScript圖表庫或其他數據可視化工具來創建和展示圖表和圖形，以呈現數據和統計信息。</span></p>
<p><span>7.放入網站:嵌入其他網站提供的媒體內容，如Twitter貼文、Instagram照片等，以擴展你的內容範圍。</span></p>
<p><span>A5:</span></p>
<p><span>1.圖片:將圖片文件直接插入到章節內容中。你可以使用HTML的 <code>&lt;img&gt;</code> 標籤或Markdown的圖片語法（例如 <code>![圖片描述](圖片URL)</code>）來添加圖片。</span></p>
<p><span>2.文本:使用Markdown或HTML來編寫文本內容，包括標題、段落、列表等。Markdown提供了簡單易讀的語法，而HTML則提供更多的自定義和控制。</span></p>
<p><span>3.超連結:使用超連結來連接不同章節或其他網站。在HTML中，你可以使用 <code>&lt;a&gt;</code> 標籤來創建超連結，而Markdown則提供了 <code>[連結文字](連結URL)</code> 的語法。</span></p>
<p><span>4.引用:引用其他資料或文字也是常見的做法。你可以使用Markdown的引用語法（<code>&gt; 引用文字</code>）或HTML的 <code>&lt;blockquote&gt;</code> 標籤來添加引用內容。</span></p>
<p><span>A6:</span></p>
<p><span>1.動畫:使用CSS或JavaScript來創建和控制動畫效果，使圖片、文本或其他元素呈現動態效果。你可以使用CSS的 <code>@keyframes</code> 樣式或JavaScript的動畫庫（如Animate.css）來添加動畫。</span></p>
<p><span>2.交互式元素:加入JavaScript互動元素，例如按鈕、滑塊、表單等，讓用戶可以與你的網站互動。這些元素可以通過事件監聽器來實現動態效果，例如點擊按鈕後顯示或隱藏特定內容。</span></p>
<p><span>3.即時更新:用JavaScript或AJAX來實現即時更新功能，例如在不刷新整個頁面的情況下加載新的內容或更新現有內容。這可以通過向後端API發送請求並處理返回的數據來實現。</span></p>
<p><span>4.影片和音頻播放器:嵌入視頻和音頻播放器，讓用戶可以播放多媒體內容。你可以使用HTML5的 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 標籤來添加視頻和音頻播放器，並使用JavaScript控制播放器的功能。</span></p>
<p><span>5.即時更新圖表:使用JavaScript圖表庫（如Chart.js、D3.js等）來創建動態圖表，並實現即時更新功能，使圖表可以根據用戶操作或數據變化而動態更新。</span></p>
<p><span>A7:</span></p>
<p><span>1.使用嵌入式代碼:將線上遊戲的嵌入代碼（embed code）添加到你的網站中。許多線上遊戲提供了嵌入代碼，你只需將其添加到網站的HTML中的相應位置即可。</span></p>
<p><span>2.使用iframe元素:使用HTML的 <code>&lt;iframe&gt;</code> 元素來嵌入線上遊戲。你可以將遊戲的URL添加到 <code>&lt;iframe&gt;</code> 元素的 <code>src</code> 屬性中，然後將 <code>&lt;iframe&gt;</code> 元素添加到你的網站中的任何位置。</span></p>
<p><span>補充:</span><code>&lt;iframe&gt;</code><span> </span>元素是HTML中的一個標記，用於在網頁中嵌入另一個獨立的HTML文檔或外部網頁。它提供了一種在當前網頁中包含其他網頁內容的方法，讓你可以將其他網站的內容嵌入到網頁中，或者在同一網站中的不同頁面之間嵌入內容。</p>
<p><code>&lt;iframe&gt;</code><span> </span>元素有一個<span> </span><code>src</code><span> </span>屬性，用於指定要嵌入的外部文檔或網頁的URL。除此之外，還可以設置其他屬性來調整iframe的大小、邊框、樣式等。通過iframe，你可以在網頁中創建內嵌的互動元素，如Google地圖、YouTube視頻、線上遊戲等，為網站提供更豐富的內容和功能。</p>
<p><span>3.設置遊戲頁面:在網站中創建一個專門的遊戲頁面，將遊戲嵌入到該頁面中。這樣做可以使遊戲與網站的其他內容分開，並為用戶提供更好的遊戲體驗。</span></p>
<p><span>4.安全性:確保嵌入的遊戲代碼來源可信，以防止可能的安全風險。如果可能的話，最好使用來自可靠和信任的遊戲提供商的嵌入代碼。</span></p>
<p><span>A8:</span></p>
<p><span>1.使用Javascript 3D庫:使用像Three.js這樣的JavaScript 3D庫，可以輕鬆在網站中展示3D零組件。你可以將3D模型導入到你的網站中，並使用Three.js等庫來渲染和顯示它們。這樣的庫通常提供了各種功能，如照明、動畫、交互等，以增強3D模型的表現力。</span></p>
<p><span>2.使用網頁GL視窗:利用WebGL技術，你可以在網頁中嵌入可交互的3D場景。這需要一些較高級的編程知識，但它可以讓你在網頁中直接渲染3D模型，使它們能夠與用戶互動。</span></p>
<p><span>3.嵌入式3D查看器:使用嵌入式3D查看器，如Sketchfab，可以將3D模型嵌入到你的網站中。Sketchfab提供了一個簡單的嵌入代碼，你可以將它添加到你的網站中，以便在線上展示和互動3D模型。</span></p>
<p><span>A9:步驟</span></p>
<p><span>1.選擇網誌平台</span></p>
<p><span>2.設置網誌</span></p>
<p><span>3.編輯內容</span></p>
<p><span>4.發布文章</span></p>
<p><span>5.促進網誌</span></p>
<p><span>6.定期更新</span></p>
<p><span>A10:步驟</span></p>
<p><span>1.選擇簡報工具</span></p>
<p><span>2.建立簡報</span></p>
<p><span>3.增加內容</span></p>
<p><span>4.設置轉場效果</span></p>
<p><span>5.編輯和分享</span></p>
<p><span>6.儲存</span></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="w-full pt-2 md:pt-0 dark:border-white/20 md:border-transparent md:dark:border-transparent md:w-[calc(100%-.5rem)]"><form class="stretch mx-2 flex flex-row gap-3 last:mb-2 md:mx-4 md:last:mb-6 lg:mx-auto lg:max-w-2xl xl:max-w-3xl">
<div class="relative flex h-full flex-1 flex-col">
<div class="flex w-full items-center">
<h2>Python 程式系統</h2>
<p>學習議題: 如何利用電腦輔助設計室的舊 Python 建立新的可攜環境?</p>
<p>1.確認原始Python環境</p>
<p>2.安裝 Python 和 Virtualenv</p>
<p>3.創建新的虛擬環境</p>
<p>4.啟動虛擬環境</p>
<p>5.安裝依賴庫</p>
<p>6.確認安裝</p>
<p>7.可攜環境打包</p>
<p>在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域?</p>
<p>1.Web 開發</p>
<p>後端開發：使用 Python（例如 Flask 或 Django 框架）來處理伺服器邏輯，數據庫交互，以及 API 開發。</p>
<p>前端與後端整合：使用 JavaScript 和 HTML 來建立前端界面，然後透過 AJAX 或 Fetch API 與後端的 Python 服務器進行通信，實現動態數據加載和交互。</p>
<p>2.數據可視化</p>
<p>動態數據展示：使用 Python 的數據處理能力（例如 Pandas 和 Matplotlib），結合 JavaScript 的圖表庫（例如 D3.js 或 Chart.js），將處理好的數據以圖表形式動態展示在網頁中。</p>
<p>儀表板：利用 Dash（基於 Flask 和 Plotly）創建交互式儀表板，這些儀表板可以嵌入到網頁中，展示實時數據。</p>
<p>3.機器學習與人工智慧</p>
<p>預測模型展示：將 Python 訓練的機器學習模型嵌入到網頁應用中，並使用 JavaScript 來實現交互式預測輸入和結果展示。</p>
<p>AI 驅動的應用：例如聊天機器人、推薦系統等，前端使用 JavaScript 進行交互，後端使用 Python 處理 AI 邏輯。</p>
<p>4.Web 爬蟲與數據收集</p>
<p>數據展示：使用 Python 爬蟲收集數據，然後將這些數據展示在網頁上，並結合 JavaScript 進行動態更新和視覺化。</p>
<p>用戶交互：用戶可以通過網頁界面提供關鍵字或 URL，後端使用 Python 爬蟲實時收集數據並返回展示結果。</p>
<p>5.自動化任務</p>
<p>網頁表單填寫：使用 Python 腳本自動填寫和提交網頁表單，結合 JavaScript 進行結果處理和展示。</p>
<p>資料收集和報告生成：使用 Python 自動生成報告並通過網頁展示，使用 JavaScript 進行交互和下載。</p>
<p>6.教育與培訓</p>
<p>互動教學工具：結合 Python 和 JavaScript 開發互動編程教學工具，讓學生在網頁中即時編寫和運行 Python 代碼。</p>
<p>在線實驗平台：建立在線實驗平台，讓用戶通過網頁界面進行數據輸入，後端 Python 處理並返回結果，前端 JavaScript 展示結果。</p>
<p>7.電子商務</p>
<p>動態推薦系統：利用 Python 的數據分析和機器學習能力，結合 JavaScript 實時向用戶推薦產品。</p>
<p>後台管理系統：使用 Python 開發後端系統，管理產品、訂單和用戶，前端用 JavaScript 和 HTML 創建交互界面。</p>
<p>(精密)機械設計流程?</p>
<p>1.需求分析</p>
<p>確定設計需求：與客戶或內部團隊討論，明確產品功能、性能要求、成本限制和時間表。</p>
<p>技術規格：列出詳細的技術規格，包括尺寸、精度、材料、環境條件等。</p>
<p>2.概念設計</p>
<p>頭腦風暴：創造性思考，產生多種設計概念。</p>
<p>初步草圖：繪製簡單的設計草圖，展示不同的設計方案。</p>
<p>可行性研究：評估每個設計概念的可行性，包括技術、經濟和時間方面的考慮。</p>
<p>3.詳細設計</p>
<p>3D 建模：使用 CAD 軟件（如 SolidWorks、AutoCAD）創建精確的三維模型。</p>
<p>材料選擇：根據設計需求選擇適合的材料。</p>
<p>工程分析：進行有限元分析（FEA）和計算流體動力學（CFD）等模擬，確保設計的強度和性能滿足要求。</p>
<p>4.設計驗證</p>
<p>5.製造準備</p>
<p>6.製造與裝配</p>
<p>7.最終測試與驗證</p>
<p>8.文件編制</p>
<p>9.生產和市場推廣</p>
<p>10.售後服務與反饋</p>
<p>設計運算?</p>
<p>1.需求分析與初步運算</p>
<p>2.材料選擇與特性計算</p>
<p>3.結構與強度計算</p>
<p>4.運動學與動力學計算</p>
<p>5.熱分析與散熱設計</p>
<p>6.摩擦與磨損計算</p>
<p>7.振動與聲學分析</p>
<p>8.流體動力學計算</p>
<p>9.成本分析與優化</p>
<p>10.安全性與可靠性計算</p>
<p>特定系統模擬?</p>
<p>1.有限元分析: 軟件:ANSYS、Abaqus、SolidWorks Simulation</p>
<p>2.計算流體動力學: 軟件:ANSYS Fluent、OpenFOAM</p>
<p>3.動力學與運動學模擬: 軟件:ATLAB/Simulink、ADAMS</p>
<p>4.熱模擬: 軟件:ANSYS、COMSOL Multiphysics</p>
<p>5.電磁模擬: 軟件:ANSYS Maxwell、COMSOL Multiphysics</p>
<p>6.聲學模擬: 軟件:COMSOL Multiphysics、ANSYS Sound</p>
<p>7.機器學習與優化: 軟件:Python、MATLAB</p>
<p>8.製造過程模擬: 軟件:Siemens NX CAM、Mastercam</p>
<p>9.多物理場模擬: 軟件:COMSOL Multiphysics</p>
<p>10.虛擬現實與增強現實（VR/AR）模擬: 軟件:Unity、Unreal Engine</p>
<h2>網頁上的 IDE</h2>
<p>IDE 是甚麼?</p>
<p>IDE 是「整合開發環境」的縮寫。它是一種軟體應用程式，旨在為軟體開發人員提供一個統一的界面，讓他們可以在同一個地方進行程式碼編寫、測試和除錯。IDE 通常包括程式碼編輯器、編譯器或解譯器、除錯器以及其他工具，如版本控制系統集成和專案管理功能。透過提供這些功能，IDE 可以提高開發效率，減少編碼錯誤，並提供更流暢的開發體驗。常見的 IDE 包括 Visual Studio、Eclipse、IntelliJ IDEA 等。</p>
<p>可以將 Replit、Codespaces 與 Gitpod 當成 IDE 用來開發各種程式嗎?</p>
<p>Replit、Codespaces 和 Gitpod 都可以被視為一種IDE，用來開發各種程式。它們都提供了一個整合開發環境，讓開發者可以在線上進行程式碼編寫、測試和除錯。這些平台通常包括程式碼編輯器、執行環境、版本控制工具和其他開發相關功能，讓開發者可以在同一個地方完成整個開發流程。</p>
<p>遠端與近端操作系統上的開發有何不同?</p>
<p>1.無需本地安裝環境</p>
<p>2.跨平台兼容性</p>
<p>3.資源共享和協作</p>
<p>4.自動化部署和集成</p>
<p>5.資源消耗</p>
<p>多人協同?</p>
<p>雲端IDE通常支援多人協同開發。這意味著多個開發者可以同時在同一個項目上工作，他們可以實時共享代碼、查看彼此的編輯和變更，並即時進行通信。這樣可以極大地促進團隊之間的合作和溝通，使得軟體開發過程更加流暢和高效。</p>
<p>這樣安全嗎?</p>
<p>雲端IDE通常會採取一些安全措施來確保多人協同開發的安全性，但最終安全性取決於使用的平台和使用者的實際操作。</p>
<p>學習議題: 學會使用網頁上的各種 IDE 之後, 有沒有甚麼感想或心得?</p>
<p>學習IDE之後了解到IDE是一個整合開發環境，讓開發者可以在同一個地方完整地開發，並支援多人協同，可以促進團隊的合作，讓開發過程更順利，完整度越高。</p>
</div>
</div>
</form></div>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>