var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:\xa0 https://41223105.github.io/wcm2024/ \n 網誌:\xa0 https://41223105.github.io/wcm2024/blog \n 簡報:\xa0 https://41223105.github.io/wcm2024/ \n 倉儲:\xa0 https://github.com/41223105/wcm2024 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit-1', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n', 'tags': '', 'url': 'Replit-1.html'}, {'title': 'homework', 'text': '', 'tags': '', 'url': 'homework.html'}, {'title': 'W1', 'text': '四技 WCM 第一週課程, 主要引導學員登入 MS Online 並建立 Github 帳號, 以及利用 cmsimde_site 作為 Template 建立個人課程網站。 \n 上學期已完成此步驟 \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2', 'text': '四技 WCM 第二週課程, 主要確認各學員是否完成 Github 中個人倉儲與網站的建立, 並且除了 Replit 還導入利用 Github Codespaces 維護個人與分組網站。 \n 建立個人課程 \n \n 登入 Github \n 連結到 \xa0 https://github.com/mdecycu/cmsimde_site \n 利用 "Use this template" 下方的 "Create a new repository" 建立名稱為 wcm2024 的倉儲 \n 在 wcm2024 倉儲上方的 Settings 設定頁面中, 左方 Pages 中的 Branch 分支區域, 選擇將 main 分支存為網頁的 root 根目錄 \n 等 wcm2024 的倉儲 Github Pages 轉檔完成後, 可以看到 commits 提交區的綠色勾勾, 就完成網址為 https://帳號.github.io/wcm2024 的個人課程網站 \n \n 利用上述步驟完成的倉儲內容, 同時帶有以 Python 編寫的動態網站程式, 以及位於 content 目錄中的靜態網頁資料. \n \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '利用 Github Classroom 建立分組網站\xa0 \n 在 mdewcm2024 帳號下, 期中分組作業名稱為 1a, 若第一組組長建立 Team 名稱為 midag1, 則分組倉儲名稱將為 1a-midag1, 而五專課程則使用 5j-midjg1, 需要如此命名作業與分組倉儲名稱的原因是, 在 Github Classroom 同一個 organization 名稱下 (即 wcm2024), 各班作業名稱必須有所區別, 而且各分組 Team 名稱也不能相同. \n 利用 Github Codespaces 維護倉儲 \n 如前所述, 使用 Replit 管理分組網站, 必須採動態建立 .ssh 目錄中的私鑰與 config, 過程比較複雜, 但若採用 Github Codespaces, 則可以在登入 Github 帳號下, 管理該帳號所有授權的倉儲, 包括分組倉儲與網站, 唯一的限制是每個月只能使用 120 core hours。 \n 常用的 git 指令 \n git 的新增、提交與推送指令: \n git add . git commit -m "說明字串" git push \n 使用 git add . 表示要認列所進行的全部改版內容, git commit -m 執行之前, 若在近端使用, 必須先行設定 git config, 將 home_ipv6 目錄下的 .gitconfig 中明確列出改版者的身分, 其中包括: \n git config --global user.name "提交者的 github 帳號名稱" \n git config --global user.email "提交者在 github 所登錄的 email address" \n 使用者也可以利用 git version 查詢目前所使用的 git 版本. \n git status 通常用來查核目前近端的改版狀況, 例如: 是否與遠端倉儲同步, 或者遠端倉儲已經有了新版本. \n 若遠端倉儲已經有新的版本, 則在 git push 之前, 必須設法取下遠端資料進行合併後, 才能再提交新的版本並推送到遠端. \n git pull = git fetch + git merge \n 由於要將各組員的 wcm2024 設定為各分組倉儲的子模組, 因此必須利用 git submodule add 以各組員的學號作為子目錄名稱, 利用下列指令, 將組員倉儲新增為分組倉儲的子模組: \n git submodule add 倉儲網址 子目錄 \n 若只要取下倉儲的主要內容, 可以使用下列指令: \n git clone 倉儲網址_協定.git 指定目錄與否 \n 若要取下帶有子模組的倉儲, 且可能該子模組還有設定其他子模組, 則必須要加上 --recurse-submodules: \n git clone --recurse-submodules 倉儲網址_協定.git 指定目錄與否 \n 說明 如何將組員的個人倉儲納入分組倉儲成為子模組 \n 說明 如何在 Replit 維護分組倉儲 \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '四技 WCM 第四週課程, 複習前三週的課程內容, 並且介紹 git 與 cmsimde 的相關用法。 \n Replit 建立分組倉儲權限 \n 由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應, 因此若將分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號), 其中的 config 內容為: \n Host github.com\nUser git\nHostname github.com\n \n 而 Host 的設定與 Windows putty 中的 session 名稱相同, 配合使用的 ssh 連線指令將會是: \n git clone --recurse-submodules git@github.com:mdewcm2024/分組倉儲名稱.git \n 當使用者完成 /home/runner/.ssh 目錄中的 id_rsa 與 config 建立後, Replit 會定期刪除免費用戶的 .ssh 目錄, 因此使用者必須將此兩個檔案存至隨身碟, 並在需要對分組倉儲改版時, 啟動分組倉儲的動態網站, 將隨身碟中的 id_rsa 與 config 檔案, upload 到分組倉儲的 downloads 目錄後, 再利用 ssh.py 的執行, 將 id_rsa 與 config 移動到 /home/runner/.ssh 目錄中. 也就是執行:python3 ssh.py \n ssh.py 程式內容如下: \n import os\nif not os.path.exists("/home/runner/.ssh"): \n    os.makedirs("/home/runner/.ssh") \nos.system("mv ./downloads/id_rsa.txt /home/runner/.ssh/id_rsa")\nos.system("mv ./downloads/config.txt /home/runner/.ssh/config")\nos.system("chmod og-rwx /home/runner/.ssh/id_rsa") \n \n Git Tutorial \n 第5組 分組網站 \xa0 1a-ag5 \xa0( repo ) \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '四技 WCM 第五週課程, 以 iframe 嵌入先前的教學影片, 並摘要各影片內容。 \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '四技網際內容管理第六週實習操作 \n 請根據第六週的網誌, 實際操作下列兩項議題: \n \n 根據您的專業, 就 git 的使用, 從與 ChatGPT 的對話, 將內容整理到個人的第六網誌, 其中包含: git 的發展歷史, 創作人的相關履歷, 以及一般相同專業人士如何利用 \xa0git 解決內容管理問題? \n 假如要在 Windows 實際 demo git client 與 git server, 該如何進行? 請將相關操作流程整理至個人第六週網誌中. \n \n \n git 的發展歷史 \n Git 的發展歷史可以追溯到2005年，當時Linux的創始人Linus Torvalds為了管理Linux核心開發而創建了Git版本控制系統。以下是Git的主要發展歷程： \n \n \n 2005年 ：Git 誕生。Linus Torvalds開始編寫 Git 作為管理 Linux 內核代碼的工具。他受到 BitKeeper 版本控制系統的啟發，但對於一些限制感到不滿，因此決定創建自己的版本控制系統。 \n \n \n 2005年4月 ：Git 開始在 Linux 內核開發中使用。Torvalds將Linux內核的版本控制從BitKeeper轉移到Git。 \n \n \n 2005年6月 ：Git 1.0版本發布。這是Git的首個正式穩定版本，標誌著Git正式進入廣泛使用的階段。 \n \n \n 2008年 ：GitHub成立。GitHub是一個基於Git的代碼托管平台，為開發者提供了方便的代碼存儲、版本控制和協作功能。GitHub的出現進一步推動了Git的普及和發展。 \n \n \n 2012年 ：Git 1.8.0版本發布。這是Git的一個重要版本，引入了許多新特性和改進，包括重寫的分支合併策略、子模組支持等。 \n \n \n 2016年 ：Git 2.0版本發布。這個版本引入了一些重要的改進和更新，包括重新設計的設置系統、忽略規則的改進等。 \n \n \n 至今 ：Git 不斷進行著更新和改進。每個新版本都帶來了更多的功能、性能優化和使用體驗改進，使得Git在軟件開發領域中得到廣泛應用。 \n \n \n git創作人Linus Torvalds的相關履歷 \n Linus Torvalds，Git 的創始人，是一位著名的計算機科學家和軟件工程師，最著名的貢獻是 Linux 操作系統的開發。以下是他的一些相關履歷： \n \n \n 早年生活和教育 ： \n \n Linus Benedict Torvalds 生於1969年12月28日，出生於芬蘭赫爾辛基。 \n 他在赫爾辛基大學學習計算機科學，於1996年獲得碩士學位。 \n \n \n \n Linux 的創建 ： \n \n 在大學期間，他開始對操作系統感興趣，並開始編寫一個新的操作系統的核心。 \n 1991年，他發布了 Linux 核心的第一個版本，這成為了 Linux 操作系統的開端。 \n \n \n \n Git 的誕生 ： \n \n 2005年，Torvalds為了管理 Linux 內核代碼的開發而創建了 Git 版本控制系統。 \n 他受到 BitKeeper 版本控制系統的啟發，但對於一些限制感到不滿，因此決定創建自己的版本控制系統。 \n \n \n \n 軟件工程師生涯 ： \n \n Torvalds 是一位極具影響力的軟件工程師，除了 Linux 和 Git 外，他還參與了許多其他開源項目。 \n 他經常參加各種開發者活動和會議，並在開源社區中發揮著積極的作用。 \n \n \n \n 榮譽與獎項 ： \n \n 2000年，他被《時代》雜誌列為「互聯網最重要的人物之一」。 \n 2012年，他獲得了芬蘭國家技術獎。 \n 他還獲得了許多其他獎項和榮譽，以表彰他在計算機科學領域的重要貢獻。 \n \n \n \n \n 一般相同專業人士如何利用 git 解決內容管理問題 ? \n \n \n \n \n \n \n \n \n \n \n \n \n 對於一般的專業人士，尤其是軟件開發人員和其他技術人員來說，Git 是一個強大的工具，可以幫助他們解決內容管理問題。以下是一些一般相同專業人士如何利用 Git 解決內容管理問題的方式： \n \n \n 版本控制 ：Git 讓你能夠跟蹤和管理內容的各個版本。這對於文檔、代碼、配置文件等各種類型的內容都非常有用。你可以隨時回溯到之前的版本，比如當需要查找錯誤的起源時，或者需要恢復到之前的穩定狀態時。 \n \n \n 分支和合併 ：Git 允許創建分支來獨立開發新功能或修復問題，而不會影響主要的開發分支。這樣可以同時進行多個功能的開發，而不會相互干擾。然後，你可以使用合併操作將這些分支合併回主要的開發線上。 \n \n \n 協作 ：Git 提供了便捷的方式讓多個人協作開發同一個項目。通過將代碼庫克隆到本地，進行修改後再推送回原始代碼庫，不同團隊成員可以輕鬆地共享和合作。這對於團隊內部或跨團隊之間的合作都非常有用。 \n \n \n 代碼審查 ：Git 可以與代碼審查工具結合使用，這使得團隊能夠進行代碼審查，從而提高代碼質量和可讀性。通過在代碼庫中創建分支，然後將分支中的代碼發送給同事進行審查，可以有效地進行代碼審查流程。 \n \n \n 自動化流程 ：利用 Git 的 Hooks 功能，可以實現自動化的流程。例如，你可以設置 pre-commit hook，在提交代碼之前運行測試，從而確保提交的代碼是合格的。這樣可以提高代碼的質量並減少錯誤。 \n \n \n Git 是一個非常強大且靈活的工具，可以滿足各種內容管理需求。通過充分利用 Git 的功能，專業人士可以更有效地管理和協作開發項目，提高生產力和內容質量。 \n \n 假 如要在 Windows 實際 demo git client 與 git server, 該如何進行? \n \n \n \n \n \n \n \n \n \n \n \n 在 Windows 上進行 Git 客戶端和伺服器的實際演示相對容易，以下是一個簡單的步驟： \n 建立 Git 伺服器 \n \n \n 安裝 Git ： 如果尚未安裝 Git，請在 Windows 上下載並安裝 Git。你可以在  Git 官方網站  上找到最新版本。 \n \n \n 創建 Git 儲存庫 ： 選擇一個文件夾作為你的 Git 儲存庫，然後右鍵單擊該文件夾，選擇“Git Bash Here”以打開 Git Bash。 \n \n \n 初始化儲存庫 ： 在 Git Bash 中，運行以下命令初始化儲存庫： \n git init --bare \n \n \n 這將創建一個裸儲存庫，該儲存庫可用於克隆和推送代碼。 \n \n \n 設置遠程連接 ： 在你的演示中，你需要告訴客戶端如何連接到此伺服器。假設你的伺服器位於本地，遠程 URL 可能是類似  file:///C:/path/to/your/repository.git  的格式。 \n \n \n \n \n 使用 Git 客戶端 \n \n \n 安裝 Git 客戶端 ： 如果尚未安裝 Git，請在 Windows 上下載並安裝 Git，就像在建立伺服器時所做的那樣。 \n \n \n 克隆儲存庫 ： 打開命令提示符或 Git Bash，然後使用  git clone  命令克隆剛剛建立的儲存庫： \n git clone file:///C:/path/to/your/repository.git \n \n \n \n 進行修改 ： 在剛剛克隆的儲存庫中進行一些修改，比如新增文件、修改文件等。 \n \n \n 提交變更 ： 使用以下命令提交你的變更： \n git add .\ngit commit -m "Your commit message" \n \n \n 推送到伺服器 ： 使用以下命令將你的變更推送到伺服器： \n git push origin master \n注意，這裡假設你將主分支命名為  master 。如果你使用的是不同的分支名稱，請將其替換為適當的分支名稱。\n 這樣就完成了一個簡單的 Git 客戶端和伺服器的實際演示。這個示例可以讓你展示 Git 的基本功能，包括克隆、提交和推送。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W6.html'}, {'title': '期中課程整理', 'text': '', 'tags': '', 'url': '期中課程整理.html'}, {'title': '網頁式內容管理', 'text': 'Q1:如何建立 Github 上的網站?Q2:如何管理內容?Q3: 如何建立章節式網站?Q4:能放入甚麼多媒體內容?Q5:靜態圖文?Q6:動態圖文?Q7:線上遊戲?Q8:3D 零組件展示?Q9:如何建立網頁系統中的網誌?Q10:如何建立網頁系統中的簡報? \n A1: \xa0GitHub 上建立網站可以使用 GitHub Pages ，先創立一個儲存庫，名稱為username.github.io，在存儲庫中創建一個名為「index.html」的 HTML 文件，用於構建你的網站主頁。將網站的代碼添加到 index.html 文件中，然後把它推到 GitHub 存儲庫。 \n A2: GitHub 上管理網站內容通常使用版本控制工具 Git。可以在本地創建一個 Git 存儲庫，將網站代碼下載到本地，然後在本地修改和更新網站內容。完成修改後，使用 Git 將更改推送到 GitHub 存儲庫。另外，可以使用分支（Branches）來開發新功能或進行實驗，然後將分支合併（Merge）到主分支（通常是 master 或 main）中。 \n A3:建立章節式網站可以使用靜態網站生成器，如Replit、Codespaces或Gitpods等。首先，需要選擇一個適合你需求的生成器，然後在本地開發環境中創建你的網站再使用生成器提供的模板和功能來創建不同的章節和內容頁面，組織你的網站內容。完成編輯後，使用生成器將網站生成為靜態文件，然後將這些文件推送到GitHub存儲庫中。最後，你的章節式網站將通過GitHub Pages或其他靜態網站托管服務進行部署，讓其他人可以訪問和瀏覽你的網站。 \n A4: \n 1.圖片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。 \n 2.影片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。 \n 3.音頻: 嵌入音樂或語音文件，如Podcast等，讓讀者可以聆聽音頻內容。 \n 4.地圖:嵌入地圖服務，如Google Maps，以展示地理位置或路線信息。 \n 5.表格:使用HTML或Markdown格式來創建和展示表格內容，以整理和呈現數據。 \n 6.圖表和圖形:使用JavaScript圖表庫或其他數據可視化工具來創建和展示圖表和圖形，以呈現數據和統計信息。 \n 7.放入網站:嵌入其他網站提供的媒體內容，如Twitter貼文、Instagram照片等，以擴展你的內容範圍。 \n A5: \n 1.圖片:將圖片文件直接插入到章節內容中。你可以使用HTML的\xa0 <img> \xa0標籤或Markdown的圖片語法（例如\xa0 ![圖片描述](圖片URL) ）來添加圖片。 \n 2.文本:使用Markdown或HTML來編寫文本內容，包括標題、段落、列表等。Markdown提供了簡單易讀的語法，而HTML則提供更多的自定義和控制。 \n 3.超連結:使用超連結來連接不同章節或其他網站。在HTML中，你可以使用\xa0 <a> \xa0標籤來創建超連結，而Markdown則提供了\xa0 [連結文字](連結URL) \xa0的語法。 \n 4.引用:引用其他資料或文字也是常見的做法。你可以使用Markdown的引用語法（ > 引用文字 ）或HTML的\xa0 <blockquote> \xa0標籤來添加引用內容。 \n A6: \n 1.動畫:使用CSS或JavaScript來創建和控制動畫效果，使圖片、文本或其他元素呈現動態效果。你可以使用CSS的\xa0 @keyframes \xa0樣式或JavaScript的動畫庫（如Animate.css）來添加動畫。 \n 2.交互式元素:加入JavaScript互動元素，例如按鈕、滑塊、表單等，讓用戶可以與你的網站互動。這些元素可以通過事件監聽器來實現動態效果，例如點擊按鈕後顯示或隱藏特定內容。 \n 3.即時更新:用JavaScript或AJAX來實現即時更新功能，例如在不刷新整個頁面的情況下加載新的內容或更新現有內容。這可以通過向後端API發送請求並處理返回的數據來實現。 \n 4.影片和音頻播放器:嵌入視頻和音頻播放器，讓用戶可以播放多媒體內容。你可以使用HTML5的\xa0 <video> \xa0和\xa0 <audio> \xa0標籤來添加視頻和音頻播放器，並使用JavaScript控制播放器的功能。 \n 5.即時更新圖表:使用JavaScript圖表庫（如Chart.js、D3.js等）來創建動態圖表，並實現即時更新功能，使圖表可以根據用戶操作或數據變化而動態更新。 \n A7: \n 1.使用嵌入式代碼:將線上遊戲的嵌入代碼（embed code）添加到你的網站中。許多線上遊戲提供了嵌入代碼，你只需將其添加到網站的HTML中的相應位置即可。 \n 2.使用iframe元素:使用HTML的\xa0 <iframe> \xa0元素來嵌入線上遊戲。你可以將遊戲的URL添加到\xa0 <iframe> \xa0元素的\xa0 src \xa0屬性中，然後將\xa0 <iframe> \xa0元素添加到你的網站中的任何位置。 \n 補充: <iframe> \xa0 元素是HTML中的一個標記，用於在網頁中嵌入另一個獨立的HTML文檔或外部網頁。它提供了一種在當前網頁中包含其他網頁內容的方法，讓你可以將其他網站的內容嵌入到網頁中，或者在同一網站中的不同頁面之間嵌入內容。 \n <iframe> \xa0 元素有一個 \xa0 src \xa0 屬性，用於指定要嵌入的外部文檔或網頁的URL。除此之外，還可以設置其他屬性來調整iframe的大小、邊框、樣式等。通過iframe，你可以在網頁中創建內嵌的互動元素，如Google地圖、YouTube視頻、線上遊戲等，為網站提供更豐富的內容和功能。 \n 3.設置遊戲頁面:在網站中創建一個專門的遊戲頁面，將遊戲嵌入到該頁面中。這樣做可以使遊戲與網站的其他內容分開，並為用戶提供更好的遊戲體驗。 \n 4.安全性:確保嵌入的遊戲代碼來源可信，以防止可能的安全風險。如果可能的話，最好使用來自可靠和信任的遊戲提供商的嵌入代碼。 \n A8: \n 1.使用Javascript 3D庫:使用像Three.js這樣的JavaScript 3D庫，可以輕鬆在網站中展示3D零組件。你可以將3D模型導入到你的網站中，並使用Three.js等庫來渲染和顯示它們。這樣的庫通常提供了各種功能，如照明、動畫、交互等，以增強3D模型的表現力。 \n 2.使用網頁GL視窗:利用WebGL技術，你可以在網頁中嵌入可交互的3D場景。這需要一些較高級的編程知識，但它可以讓你在網頁中直接渲染3D模型，使它們能夠與用戶互動。 \n 3.嵌入式3D查看器:使用嵌入式3D查看器，如Sketchfab，可以將3D模型嵌入到你的網站中。Sketchfab提供了一個簡單的嵌入代碼，你可以將它添加到你的網站中，以便在線上展示和互動3D模型。 \n A9:步驟 \n 1.選擇網誌平台 \n 2.設置網誌 \n 3.編輯內容 \n 4.發布文章 \n 5.促進網誌 \n 6.定期更新 \n A10:步驟 \n 1.選擇簡報工具 \n 2.建立簡報 \n 3.增加內容 \n 4.設置轉場效果 \n 5.編輯和分享 \n 6.儲存 \n \n \n \n', 'tags': '', 'url': '網頁式內容管理.html'}, {'title': 'Python 程式系統', 'text': '學習議題: 如何利用電腦輔助設計室的舊 Python 建立新的可攜環境? \n 1.確認原始Python環境 \n 2.安裝 Python 和 Virtualenv \n 3.創建新的虛擬環境 \n 4.啟動虛擬環境 \n 5.安裝依賴庫 \n 6.確認安裝 \n 7.可攜環境打包 \n 在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? \n 1.Web 開發 \n 後端開發：使用 Python（例如 Flask 或 Django 框架）來處理伺服器邏輯，數據庫交互，以及 API 開發。 \n 前端與後端整合：使用 JavaScript 和 HTML 來建立前端界面，然後透過 AJAX 或 Fetch API 與後端的 Python 服務器進行通信，實現動態數據加載和交互。 \n 2.數據可視化 \n 動態數據展示：使用 Python 的數據處理能力（例如 Pandas 和 Matplotlib），結合 JavaScript 的圖表庫（例如 D3.js 或 Chart.js），將處理好的數據以圖表形式動態展示在網頁中。 \n 儀表板：利用 Dash（基於 Flask 和 Plotly）創建交互式儀表板，這些儀表板可以嵌入到網頁中，展示實時數據。 \n 3.機器學習與人工智慧 \n 預測模型展示：將 Python 訓練的機器學習模型嵌入到網頁應用中，並使用 JavaScript 來實現交互式預測輸入和結果展示。 \n AI 驅動的應用：例如聊天機器人、推薦系統等，前端使用 JavaScript 進行交互，後端使用 Python 處理 AI 邏輯。 \n 4.Web 爬蟲與數據收集 \n 數據展示：使用 Python 爬蟲收集數據，然後將這些數據展示在網頁上，並結合 JavaScript 進行動態更新和視覺化。 \n 用戶交互：用戶可以通過網頁界面提供關鍵字或 URL，後端使用 Python 爬蟲實時收集數據並返回展示結果。 \n 5.自動化任務 \n 網頁表單填寫：使用 Python 腳本自動填寫和提交網頁表單，結合 JavaScript 進行結果處理和展示。 \n 資料收集和報告生成：使用 Python 自動生成報告並通過網頁展示，使用 JavaScript 進行交互和下載。 \n 6.教育與培訓 \n 互動教學工具：結合 Python 和 JavaScript 開發互動編程教學工具，讓學生在網頁中即時編寫和運行 Python 代碼。 \n 在線實驗平台：建立在線實驗平台，讓用戶通過網頁界面進行數據輸入，後端 Python 處理並返回結果，前端 JavaScript 展示結果。 \n 7.電子商務 \n 動態推薦系統：利用 Python 的數據分析和機器學習能力，結合 JavaScript 實時向用戶推薦產品。 \n 後台管理系統：使用 Python 開發後端系統，管理產品、訂單和用戶，前端用 JavaScript 和 HTML 創建交互界面。 \n (精密)機械設計流程? \n 1.需求分析 \n 確定設計需求：與客戶或內部團隊討論，明確產品功能、性能要求、成本限制和時間表。 \n 技術規格：列出詳細的技術規格，包括尺寸、精度、材料、環境條件等。 \n 2.概念設計 \n 頭腦風暴：創造性思考，產生多種設計概念。 \n 初步草圖：繪製簡單的設計草圖，展示不同的設計方案。 \n 可行性研究：評估每個設計概念的可行性，包括技術、經濟和時間方面的考慮。 \n 3.詳細設計 \n 3D 建模：使用 CAD 軟件（如 SolidWorks、AutoCAD）創建精確的三維模型。 \n 材料選擇：根據設計需求選擇適合的材料。 \n 工程分析：進行有限元分析（FEA）和計算流體動力學（CFD）等模擬，確保設計的強度和性能滿足要求。 \n 4.設計驗證 \n 5.製造準備 \n 6.製造與裝配 \n 7.最終測試與驗證 \n 8.文件編制 \n 9.生產和市場推廣 \n 10.售後服務與反饋 \n 設計運算? \n 1.需求分析與初步運算 \n 2.材料選擇與特性計算 \n 3.結構與強度計算 \n 4.運動學與動力學計算 \n 5.熱分析與散熱設計 \n 6.摩擦與磨損計算 \n 7.振動與聲學分析 \n 8.流體動力學計算 \n 9.成本分析與優化 \n 10.安全性與可靠性計算 \n 特定系統模擬? \n 1.有限元分析: 軟件:ANSYS、Abaqus、SolidWorks Simulation \n 2.計算流體動力學: 軟件:ANSYS Fluent、OpenFOAM \n 3.動力學與運動學模擬: 軟件:ATLAB/Simulink、ADAMS \n 4.熱模擬: 軟件:ANSYS、COMSOL Multiphysics \n 5.電磁模擬: 軟件:ANSYS Maxwell、COMSOL Multiphysics \n 6.聲學模擬: 軟件:COMSOL Multiphysics、ANSYS Sound \n 7.機器學習與優化: 軟件:Python、MATLAB \n 8.製造過程模擬: 軟件:Siemens NX CAM、Mastercam \n 9.多物理場模擬: 軟件:COMSOL Multiphysics \n 10.虛擬現實與增強現實（VR/AR）模擬: 軟件:Unity、Unreal Engine \n', 'tags': '', 'url': 'Python 程式系統.html'}, {'title': '網頁上的 IDE', 'text': 'IDE 是甚麼? \n IDE 是「整合開發環境」的縮寫。它是一種軟體應用程式，旨在為軟體開發人員提供一個統一的界面，讓他們可以在同一個地方進行程式碼編寫、測試和除錯。IDE 通常包括程式碼編輯器、編譯器或解譯器、除錯器以及其他工具，如版本控制系統集成和專案管理功能。透過提供這些功能，IDE 可以提高開發效率，減少編碼錯誤，並提供更流暢的開發體驗。常見的 IDE 包括 Visual Studio、Eclipse、IntelliJ IDEA 等。 \n 可以將 Replit、Codespaces 與 Gitpod 當成 IDE 用來開發各種程式嗎? \n Replit、Codespaces 和 Gitpod 都可以被視為一種IDE，用來開發各種程式。它們都提供了一個整合開發環境，讓開發者可以在線上進行程式碼編寫、測試和除錯。這些平台通常包括程式碼編輯器、執行環境、版本控制工具和其他開發相關功能，讓開發者可以在同一個地方完成整個開發流程。 \n 遠端與近端操作系統上的開發有何不同? \n 1.無需本地安裝環境 \n 2.跨平台兼容性 \n 3.資源共享和協作 \n 4.自動化部署和集成 \n 5.資源消耗 \n 多人協同? \n 雲端IDE通常支援多人協同開發。這意味著多個開發者可以同時在同一個項目上工作，他們可以實時共享代碼、查看彼此的編輯和變更，並即時進行通信。這樣可以極大地促進團隊之間的合作和溝通，使得軟體開發過程更加流暢和高效。 \n 這樣安全嗎? \n 雲端IDE通常會採取一些安全措施來確保多人協同開發的安全性，但最終安全性取決於使用的平台和使用者的實際操作。 \n 學習議題: 學會使用網頁上的各種 IDE 之後, 有沒有甚麼感想或心得? \n 學習IDE之後了解到IDE是一個整合開發環境，讓開發者可以在同一個地方完整地開發，並支援多人協同，可以促進團隊的合作，讓開發過程更順利，完整度越高。 \n', 'tags': '', 'url': '網頁上的 IDE.html'}, {'title': 'Replit-2', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n', 'tags': '', 'url': 'Replit-2.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};