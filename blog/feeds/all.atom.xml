<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-20T10:25:00+08:00</updated><entry><title>期末報告</title><link href="./2024-Spring-%E6%9C%9F%E6%9C%AB-blog-tutorial.html" rel="alternate"></link><published>2024-06-20T10:25:00+08:00</published><updated>2024-06-20T02:38:26+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-20:./2024-Spring-期末-blog-tutorial.html</id><summary type="html">&lt;p&gt;期末報告 小遊戲&lt;/p&gt;
</summary><content type="html">&lt;p&gt;期末報告 小遊戲&lt;/p&gt;


&lt;p&gt;期末專案&lt;/p&gt;
&lt;p&gt;"猴子吃香蕉小遊戲"&lt;/p&gt;
&lt;h1&gt;ME:幫我用python寫出猴子吃香蕉的遊戲 用網頁方式呈現&lt;/h1&gt;
&lt;p&gt;chatgpt:&lt;/p&gt;
&lt;p&gt;可以利用Python的Flask框架來建立一個簡單的網頁遊戲，讓猴子吃香蕉。這個遊戲會包括以下幾個部分：&lt;/p&gt;
&lt;p&gt;伺服器端的Python代碼，用於處理網頁請求。
客戶端的HTML和JavaScript代碼，用於顯示遊戲和處理用戶互動。
首先，我們需要安裝Flask。你可以使用以下命令來安裝：&lt;/p&gt;
&lt;p&gt;pip install flask
然後，創建一個Flask應用程序，並撰寫HTML和JavaScript代碼。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Flask 伺服器端代碼（app.py）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;from flask import Flask, render_template&lt;/p&gt;
&lt;p&gt;app = Flask(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;@app.route('/')
def index():
    return render_template('index.html')&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    app.run(debug=True)
2. HTML和JavaScript代碼（templates/index.html）&lt;/p&gt;
&lt;p&gt;在這個文件中，我們會撰寫HTML來顯示遊戲界面，並使用JavaScript來處理遊戲邏輯。&lt;/p&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;猴子吃香蕉遊戲&lt;/title&gt;
    &lt;style&gt;
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
            margin: 0;
        }
        #gameCanvas {
            border: 1px solid #000;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;canvas id="gameCanvas" width="800" height="600"&gt;&lt;/canvas&gt;
    &lt;script&gt;
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        let monkey = {
            x: canvas.width / 2,
            y: canvas.height - 60,
            width: 50,
            height: 50,
            dx: 5
        };

        let banana = {
            x: Math.random() * canvas.width,
            y: 0,
            width: 30,
            height: 30,
            dy: 2
        };

        function drawMonkey() {
            ctx.fillStyle = 'brown';
            ctx.fillRect(monkey.x, monkey.y, monkey.width, monkey.height);
        }

        function drawBanana() {
            ctx.fillStyle = 'yellow';
            ctx.fillRect(banana.x, banana.y, banana.width, banana.height);
        }

        function clearCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function moveBanana() {
            banana.y += banana.dy;
            if (banana.y &gt; canvas.height) {
                banana.y = 0;
                banana.x = Math.random() * canvas.width;
            }
        }

        function detectCollision() {
            if (banana.x &lt; monkey.x + monkey.width &amp;&amp;
                banana.x + banana.width &gt; monkey.x &amp;&amp;
                banana.y &lt; monkey.y + monkey.height &amp;&amp;
                banana.y + banana.height &gt; monkey.y) {
                banana.y = 0;
                banana.x = Math.random() * canvas.width;
                alert('猴子吃到香蕉了！');
            }
        }

        function update() {
            clearCanvas();
            drawMonkey();
            drawBanana();
            moveBanana();
            detectCollision();
            requestAnimationFrame(update);
        }

        function moveMonkey(event) {
            if (event.key === 'ArrowLeft' &amp;&amp; monkey.x &gt; 0) {
                monkey.x -= monkey.dx;
            } else if (event.key === 'ArrowRight' &amp;&amp; monkey.x + monkey.width &lt; canvas.width) {
                monkey.x += monkey.dx;
            }
        }

        document.addEventListener('keydown', moveMonkey);
        update();
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;h1&gt;猴子吃香蕉小遊戲&lt;/h1&gt;
&lt;p&gt;ME:幫我用python寫出猴子吃香蕉的遊戲 用網頁方式呈現&lt;/p&gt;
&lt;p&gt;chatgpt:
可以利用Python的Flask框架來建立一個簡單的網頁遊戲，讓猴子吃香蕉。這個遊戲會包括以下幾個部分：&lt;/p&gt;
&lt;p&gt;1.伺服器端的Python代碼，用於處理網頁請求。
2.客戶端的HTML和JavaScript代碼，用於顯示遊戲和處理用戶互動。
首先，我們需要安裝Flask。你可以使用以下命令來安裝：&lt;/p&gt;
&lt;p&gt;--pip install flask&lt;/p&gt;
&lt;p&gt;然後，創建一個Flask應用程序，並撰寫HTML和JavaScript代碼。
1. Flask 伺服器端代碼（app.py）
--
from flask import Flask, render_template&lt;/p&gt;
&lt;p&gt;app = Flask(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;@app.route('/')
def index():
    return render_template('index.html')&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    app.run(debug=True)&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML和JavaScript代碼（templates/index.html）
在這個文件中，我們會撰寫HTML來顯示遊戲界面，並使用JavaScript來處理遊戲邏輯。
--&lt;/li&gt;
&lt;/ol&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;猴子吃香蕉遊戲&lt;/title&gt;
    &lt;style&gt;
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
            margin: 0;
        }
        #gameCanvas {
            border: 1px solid #000;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;canvas id="gameCanvas" width="800" height="600"&gt;&lt;/canvas&gt;
    &lt;script&gt;
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        let monkey = {
            x: canvas.width / 2,
            y: canvas.height - 60,
            width: 50,
            height: 50,
            dx: 5
        };

        let banana = {
            x: Math.random() * canvas.width,
            y: 0,
            width: 30,
            height: 30,
            dy: 2
        };

        function drawMonkey() {
            ctx.fillStyle = 'brown';
            ctx.fillRect(monkey.x, monkey.y, monkey.width, monkey.height);
        }

        function drawBanana() {
            ctx.fillStyle = 'yellow';
            ctx.fillRect(banana.x, banana.y, banana.width, banana.height);
        }

        function clearCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function moveBanana() {
            banana.y += banana.dy;
            if (banana.y &gt; canvas.height) {
                banana.y = 0;
                banana.x = Math.random() * canvas.width;
            }
        }

        function detectCollision() {
            if (banana.x &lt; monkey.x + monkey.width &amp;&amp;
                banana.x + banana.width &gt; monkey.x &amp;&amp;
                banana.y &lt; monkey.y + monkey.height &amp;&amp;
                banana.y + banana.height &gt; monkey.y) {
                banana.y = 0;
                banana.x = Math.random() * canvas.width;
                alert('猴子吃到香蕉了！');
            }
        }

        function update() {
            clearCanvas();
            drawMonkey();
            drawBanana();
            moveBanana();
            detectCollision();
            requestAnimationFrame(update);
        }

        function moveMonkey(event) {
            if (event.key === 'ArrowLeft' &amp;&amp; monkey.x &gt; 0) {
                monkey.x -= monkey.dx;
            } else if (event.key === 'ArrowRight' &amp;&amp; monkey.x + monkey.width &lt; canvas.width) {
                monkey.x += monkey.dx;
            }
        }

        document.addEventListener('keydown', moveMonkey);
        update();
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;--&lt;/p&gt;</content><category term="期末"></category><category term="網誌編寫"></category></entry><entry><title>w14 課程內容</title><link href="./2024-Spring-w14-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T23:44:00+08:00</published><updated>2024-06-14T17:40:21+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w14-blog-tutorial.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;網站內容整理&lt;/h1&gt;
&lt;p&gt;上課內容：
1.有關建立網站
2.Replit靜態網站檢視
3.建立Replit分組倉儲權限
4.Replit,Codespaces與Gitpods執行靜態與動態網站
5.複習前三週上課內容與git介紹&lt;/p&gt;</content><category term="w14"></category><category term="網誌編寫"></category></entry><entry><title>w13 課程內容</title><link href="./2024-Spring-w13-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T23:20:00+08:00</published><updated>2024-06-14T17:40:21+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w13-blog-tutorial.html</id><summary type="html">&lt;p&gt;w13網際內容管理上課內容, 從單機猜數字遊戲與 AI 應用談起&lt;/p&gt;
</summary><content type="html">&lt;p&gt;w13網際內容管理上課內容, 從單機猜數字遊戲與 AI 應用談起&lt;/p&gt;


&lt;h1&gt;使用 SSH 客戶端遠端登入&lt;/h1&gt;
&lt;p&gt;學員需要一個 SSH 客戶端來連接到主機。以下是使用不同操作系統的簡單說明：&lt;/p&gt;
&lt;p&gt;Windows 可以使用 PuTTY 或 Windows Terminal。&lt;/p&gt;
&lt;p&gt;打開 PuTTY，輸入 stud.cycu.org 作為主機名，並輸入用戶名和初始密碼。&lt;/p&gt;
&lt;p&gt;macOS 和 Linux 打開終端（Terminal）。&lt;/p&gt;
&lt;p&gt;輸入以下命令：&lt;/p&gt;
&lt;p&gt;ssh 學號@stud.cycu.org 例如，如果學號是 s1234567，則輸入：&lt;/p&gt;
&lt;p&gt;ssh s1234567@stud.cycu.org&lt;/p&gt;
&lt;h1&gt;修改初始密碼&lt;/h1&gt;
&lt;p&gt;首次登入後，應立即修改初始密碼。可以使用 passwd 命令來修改：&lt;/p&gt;
&lt;p&gt;passwd 系統會提示輸入當前密碼，然後輸入並確認新密碼。&lt;/p&gt;
&lt;p&gt;確保資料安全
提醒學員注意資料備份和安全：&lt;/p&gt;
&lt;p&gt;定期備份重要數據。&lt;/p&gt;
&lt;p&gt;不要將敏感信息存儲在公共目錄中。&lt;/p&gt;
&lt;p&gt;使用安全的密碼和兩步驗證（如有可能）。&lt;/p&gt;</content><category term="w13"></category><category term="網誌編寫"></category></entry><entry><title>w10 課程內容</title><link href="./2024-Spring-w10-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T22:55:00+08:00</published><updated>2024-06-15T09:39:40+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w10-blog-tutorial.html</id><summary type="html">&lt;p&gt;w10網際內容管理上課內容,說明如何在網頁中加入 Brython 程式應用&lt;/p&gt;
</summary><content type="html">&lt;p&gt;w10網際內容管理上課內容,說明如何在網頁中加入 Brython 程式應用&lt;/p&gt;


&lt;h1&gt;Brython 程式環境&lt;/h1&gt;
&lt;p&gt;將 brython_w_editor_html.txt 超文件內容放入網誌中, 即可得到下列內容.&lt;/p&gt;
&lt;p&gt;若要放入動態網站, 則必須注意各引用頁面是由 cmsimde 目錄中啟動, 必須使用 brython_on_editor.txt 超文件格式.&lt;/p&gt;</content><category term="w10"></category><category term="網誌編寫"></category></entry><entry><title>w9 課程內容</title><link href="./2024-Spring-w9-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T22:34:00+08:00</published><updated>2024-06-14T17:40:21+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w9-blog-tutorial.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;期中課程整理&lt;/h1&gt;
&lt;p&gt;目的：利用網頁來管理與個人或專業領域應用相關的內容&lt;/p&gt;
&lt;p&gt;網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中，只要有能夠執行 Python 的雲端或近端環境，開啟網頁編輯程式進行改版，上傳資料可在 Github 倉儲中透過 Pages 的全球資訊伺服器呈現網站內容。&lt;/p&gt;</content><category term="w9"></category><category term="網誌編寫"></category></entry><entry><title>w8 課程內容</title><link href="./2024-Spring-w8-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T17:16:00+08:00</published><updated>2024-06-14T17:40:21+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w8-blog-tutorial.html</id><summary type="html">&lt;p&gt;w8 上課內容， 從教育的本質看網際內容管理課程的內容要點.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;w8 上課內容， 從教育的本質看網際內容管理課程的內容要點.&lt;/p&gt;


&lt;h1&gt;了解教育的本質、意義&lt;/h1&gt;
&lt;p&gt;教育的意義在於促進個人知識和技能的獲取、思維能力和人格的發展，並推動社會公平、文化傳承、公民意識的提高。它提升勞動力素質和國家競爭力，促進經濟繁榮和科技創新。同時，教育增強國際理解，推動可持續發展，對個人和社會均至關重要。&lt;/p&gt;</content><category term="w8"></category><category term="網誌編寫"></category></entry><entry><title>w6 課程內容</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T16:03:00+08:00</published><updated>2024-06-15T08:50:29+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;w6 上課內容， 說明如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法. &lt;/p&gt;
</summary><content type="html">&lt;p&gt;w6 上課內容， 說明如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法. &lt;/p&gt;


&lt;p&gt;請根據第六週的網誌, 實際操作下列兩項議題:&lt;/p&gt;
&lt;p&gt;根據您的專業, 就 git 的使用, 從與 ChatGPT 的對話, 將內容整理到個人的第六網誌, 其中包含: git 的發展歷史, 創作人的相關履歷, 以及一般相同專業人士如何利用  git 解決內容管理問題?
假如要在 Windows 實際 demo git client 與 git server, 該如何進行? 請將相關操作流程整理至個人第六週網誌中.&lt;/p&gt;
&lt;h1&gt;git 的發展歷史&lt;/h1&gt;
&lt;p&gt;Git 的發展歷史可以追溯到2005年，當時Linux的創始人Linus Torvalds為了管理Linux核心開發而創建了Git版本控制系統。以下是Git的主要發展歷程：&lt;/p&gt;
&lt;p&gt;2005年：Git 誕生。Linus Torvalds開始編寫 Git 作為管理 Linux 內核代碼的工具。他受到 BitKeeper 版本控制系統的啟發，但對於一些限制感到不滿，因此決定創建自己的版本控制系統。&lt;/p&gt;
&lt;p&gt;2005年4月：Git 開始在 Linux 內核開發中使用。Torvalds將Linux內核的版本控制從BitKeeper轉移到Git。&lt;/p&gt;
&lt;p&gt;2005年6月：Git 1.0版本發布。這是Git的首個正式穩定版本，標誌著Git正式進入廣泛使用的階段。&lt;/p&gt;
&lt;p&gt;2008年：GitHub成立。GitHub是一個基於Git的代碼托管平台，為開發者提供了方便的代碼存儲、版本控制和協作功能。GitHub的出現進一步推動了Git的普及和發展。&lt;/p&gt;
&lt;p&gt;2012年：Git 1.8.0版本發布。這是Git的一個重要版本，引入了許多新特性和改進，包括重寫的分支合併策略、子模組支持等。&lt;/p&gt;
&lt;p&gt;2016年：Git 2.0版本發布。這個版本引入了一些重要的改進和更新，包括重新設計的設置系統、忽略規則的改進等。&lt;/p&gt;
&lt;p&gt;至今：Git 不斷進行著更新和改進。每個新版本都帶來了更多的功能、性能優化和使用體驗改進，使得Git在軟件開發領域中得到廣泛應用。&lt;/p&gt;
&lt;p&gt;git創作人Linus Torvalds的相關履歷&lt;/p&gt;
&lt;p&gt;Linus Torvalds，Git 的創始人，是一位著名的計算機科學家和軟件工程師，最著名的貢獻是 Linux 操作系統的開發。以下是他的一些相關履歷：&lt;/p&gt;
&lt;p&gt;早年生活和教育：&lt;/p&gt;
&lt;p&gt;Linus Benedict Torvalds 生於1969年12月28日，出生於芬蘭赫爾辛基。
他在赫爾辛基大學學習計算機科學，於1996年獲得碩士學位。
Linux 的創建：&lt;/p&gt;
&lt;p&gt;在大學期間，他開始對操作系統感興趣，並開始編寫一個新的操作系統的核心。
1991年，他發布了 Linux 核心的第一個版本，這成為了 Linux 操作系統的開端。
Git 的誕生：&lt;/p&gt;
&lt;p&gt;2005年，Torvalds為了管理 Linux 內核代碼的開發而創建了 Git 版本控制系統。
他受到 BitKeeper 版本控制系統的啟發，但對於一些限制感到不滿，因此決定創建自己的版本控制系統。
軟件工程師生涯：&lt;/p&gt;
&lt;p&gt;Torvalds 是一位極具影響力的軟件工程師，除了 Linux 和 Git 外，他還參與了許多其他開源項目。
他經常參加各種開發者活動和會議，並在開源社區中發揮著積極的作用。
榮譽與獎項：&lt;/p&gt;
&lt;p&gt;2000年，他被《時代》雜誌列為「互聯網最重要的人物之一」。
2012年，他獲得了芬蘭國家技術獎。
他還獲得了許多其他獎項和榮譽，以表彰他在計算機科學領域的重要貢獻。&lt;/p&gt;
&lt;h1&gt;一般相同專業人士如何利用 git 解決內容管理問題?&lt;/h1&gt;
&lt;p&gt;對於一般的專業人士，尤其是軟件開發人員和其他技術人員來說，Git 是一個強大的工具，可以幫助他們解決內容管理問題。以下是一些一般相同專業人士如何利用 Git 解決內容管理問題的方式：&lt;/p&gt;
&lt;p&gt;版本控制：Git 讓你能夠跟蹤和管理內容的各個版本。這對於文檔、代碼、配置文件等各種類型的內容都非常有用。你可以隨時回溯到之前的版本，比如當需要查找錯誤的起源時，或者需要恢復到之前的穩定狀態時。&lt;/p&gt;
&lt;p&gt;分支和合併：Git 允許創建分支來獨立開發新功能或修復問題，而不會影響主要的開發分支。這樣可以同時進行多個功能的開發，而不會相互干擾。然後，你可以使用合併操作將這些分支合併回主要的開發線上。&lt;/p&gt;
&lt;p&gt;協作：Git 提供了便捷的方式讓多個人協作開發同一個項目。通過將代碼庫克隆到本地，進行修改後再推送回原始代碼庫，不同團隊成員可以輕鬆地共享和合作。這對於團隊內部或跨團隊之間的合作都非常有用。&lt;/p&gt;
&lt;p&gt;代碼審查：Git 可以與代碼審查工具結合使用，這使得團隊能夠進行代碼審查，從而提高代碼質量和可讀性。通過在代碼庫中創建分支，然後將分支中的代碼發送給同事進行審查，可以有效地進行代碼審查流程。&lt;/p&gt;
&lt;p&gt;自動化流程：利用 Git 的 Hooks 功能，可以實現自動化的流程。例如，你可以設置 pre-commit hook，在提交代碼之前運行測試，從而確保提交的代碼是合格的。這樣可以提高代碼的質量並減少錯誤。&lt;/p&gt;
&lt;p&gt;Git 是一個非常強大且靈活的工具，可以滿足各種內容管理需求。通過充分利用 Git 的功能，專業人士可以更有效地管理和協作開發項目，提高生產力和內容質量。&lt;/p&gt;
&lt;h1&gt;假如要在 Windows 實際 demo git client 與 git server, 該如何進行?&lt;/h1&gt;
&lt;p&gt;在 Windows 上進行 Git 客戶端和伺服器的實際演示相對容易，以下是一個簡單的步驟：&lt;/p&gt;
&lt;p&gt;建立 Git 伺服器&lt;/p&gt;
&lt;p&gt;安裝 Git： 如果尚未安裝 Git，請在 Windows 上下載並安裝 Git。你可以在 Git 官方網站 上找到最新版本。&lt;/p&gt;
&lt;p&gt;創建 Git 儲存庫： 選擇一個文件夾作為你的 Git 儲存庫，然後右鍵單擊該文件夾，選擇“Git Bash Here”以打開 Git Bash。&lt;/p&gt;
&lt;p&gt;初始化儲存庫： 在 Git Bash 中，運行以下命令初始化儲存庫：&lt;/p&gt;
&lt;p&gt;git init --bare
這將創建一個裸儲存庫，該儲存庫可用於克隆和推送代碼。&lt;/p&gt;
&lt;p&gt;設置遠程連接： 在你的演示中，你需要告訴客戶端如何連接到此伺服器。假設你的伺服器位於本地，遠程 URL 可能是類似 file:///C:/path/to/your/repository.git 的格式。&lt;/p&gt;
&lt;h1&gt;使用 Git 客戶端&lt;/h1&gt;
&lt;p&gt;安裝 Git 客戶端： 如果尚未安裝 Git，請在 Windows 上下載並安裝 Git，就像在建立伺服器時所做的那樣。&lt;/p&gt;
&lt;p&gt;克隆儲存庫： 打開命令提示符或 Git Bash，然後使用 git clone 命令克隆剛剛建立的儲存庫：&lt;/p&gt;
&lt;p&gt;git clone file:///C:/path/to/your/repository.git&lt;/p&gt;
&lt;p&gt;進行修改： 在剛剛克隆的儲存庫中進行一些修改，比如新增文件、修改文件等。&lt;/p&gt;
&lt;p&gt;提交變更： 使用以下命令提交你的變更：&lt;/p&gt;
&lt;p&gt;git add .
git commit -m "Your commit message"&lt;/p&gt;
&lt;p&gt;推送到伺服器： 使用以下命令將你的變更推送到伺服器：
git push origin master
注意，這裡假設你將主分支命名為 master。如果你使用的是不同的分支名稱，請將其替換為適當的分支名稱。
這樣就完成了一個簡單的 Git 客戶端和伺服器的實際演示。這個示例可以讓你展示 Git 的基本功能，包括克隆、提交和推送。&lt;/p&gt;</content><category term="w6"></category><category term="網誌編寫"></category></entry><entry><title>w5 課程內容</title><link href="./2024-Spring-w5-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T16:00:00+08:00</published><updated>2024-06-14T17:40:21+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w5-blog-tutorial.html</id><summary type="html">&lt;p&gt;w5 上課內容，以 iframe 嵌入先前的教學影片, 並摘要各影片內容.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;w5 上課內容，以 iframe 嵌入先前的教學影片, 並摘要各影片內容.&lt;/p&gt;


&lt;h1&gt;將組員的個人倉儲納為分組倉儲的子模組&lt;/h1&gt;
&lt;p&gt;可以先 git status&lt;/p&gt;
&lt;p&gt;git submodule add (貼上自己的倉儲網站).git (輸入自己的學號)&lt;/p&gt;
&lt;p&gt;git add .&lt;/p&gt;
&lt;p&gt;git commit -m "上傳子模組"&lt;/p&gt;
&lt;p&gt;git push&lt;/p&gt;</content><category term="w5"></category><category term="網誌編寫"></category></entry><entry><title>w4 課程內容</title><link href="./2024-Spring-w4-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T15:48:00+08:00</published><updated>2024-06-15T09:10:15+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w4-blog-tutorial.html</id><summary type="html">&lt;p&gt;w4 上課內容，複習前三週的課程內容, 並且介紹 git 與 cmsimde 的相關用法.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;w4 上課內容，複習前三週的課程內容, 並且介紹 git 與 cmsimde 的相關用法.&lt;/p&gt;


&lt;h1&gt;有關建立網站&lt;/h1&gt;
&lt;p&gt;cmsimde 套件有關動態與靜態網站的標題、啟動網址與埠號設定位於 init.py 程式檔案中, 若將 init.py 中的啟動網址設為外部 IP, 則此網際內容管理系統的編輯網站, 可直接連外.&lt;/p&gt;
&lt;h1&gt;Replit 靜態網站檢視&lt;/h1&gt;
&lt;p&gt;下載 main2.txt 與 static.txt, 其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視. 另一方面, 若要取消先前執行 python3 main2.py, 只需要在 Shell 頁面按下 ctrl + c, c 代表 cancle 也就是取消. 然後若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵.&lt;/p&gt;
&lt;h1&gt;Replit 建立分組倉儲權限&lt;/h1&gt;
&lt;p&gt;由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應, 因此若將分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號)&lt;/p&gt;
&lt;h1&gt;Git Tutorial&lt;/h1&gt;
&lt;p&gt;第5組分組網站 1a-ag5 (repo) &lt;/p&gt;</content><category term="w4"></category><category term="網誌編寫"></category></entry><entry><title>w3 課程內容</title><link href="./2024-Spring-w3-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T15:44:00+08:00</published><updated>2024-06-14T17:40:21+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w3-blog-tutorial.html</id><summary type="html">&lt;p&gt;w3 上課內容，除了 Replit, Github Codespaces, Gitpod 之外, 還介紹如何利用可攜系統維護個人與分組網站.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;w3 上課內容，除了 Replit, Github Codespaces, Gitpod 之外, 還介紹如何利用可攜系統維護個人與分組網站.&lt;/p&gt;


&lt;h1&gt;利用Gitpod維護倉儲&lt;/h1&gt;
&lt;p&gt;https://www.gitpod.io/ - gitpod的使用與 Codespaces 類似,每個月有 50 小時的免費使用時間, 可以使用 Github 帳號登入&lt;/p&gt;
&lt;h1&gt;利用 localhost 維護倉儲&lt;/h1&gt;
&lt;p&gt;透過 Windows 環境中的 USB 隨身碟, 配置可攜程式系統, 用來管理個人與分組的分組倉儲與網站, 可使用老師給的portable_2024.7z(密碼為:kmolab)&lt;/p&gt;</content><category term="w3"></category><category term="網誌編寫"></category></entry><entry><title>w2 課程內容</title><link href="./2024-Spring-w2-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T15:40:00+08:00</published><updated>2024-06-14T17:40:21+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w2-blog-tutorial.html</id><summary type="html">&lt;p&gt;w2 上課內容，主要確認各學員是否完成 Github 中個人倉儲與網站的建立，並且除了 Replit 還導入利用 Github Codespaces 維護個人與分組網站.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;w2 上課內容，主要確認各學員是否完成 Github 中個人倉儲與網站的建立，並且除了 Replit 還導入利用 Github Codespaces 維護個人與分組網站.&lt;/p&gt;


&lt;h1&gt;利用 Github Classroom 建立分組網站&lt;/h1&gt;
&lt;p&gt;在 mdewcm2024 帳號下, 期中分組作業名稱為 1a,各班作業名稱必須有所區別, 而且各分組 Team 名稱也不能相同.&lt;/p&gt;
&lt;h1&gt;如何利用 Codespaces 維護網站&lt;/h1&gt;
&lt;p&gt;採用 Github Codespaces 維護網站的好處是, Visual Studio code 介面提供多終端機與多 ports 開啟功能, 在 Codespaces 中維護 wcm2024 的過程幾乎如同在 localhost Windows 10 或 11 的操作系統環境中進行.&lt;/p&gt;</content><category term="w2"></category><category term="網誌編寫"></category></entry><entry><title>w1 課程內容</title><link href="./2024-Spring-w1.-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T15:32:00+08:00</published><updated>2024-06-14T17:40:21+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w1.-blog-tutorial.html</id><summary type="html">&lt;p&gt;w1 上課內容&lt;/p&gt;
</summary><content type="html">&lt;p&gt;w1 上課內容&lt;/p&gt;


&lt;h1&gt;建立個人的Github帳號&lt;/h1&gt;
&lt;p&gt;自行建立 Github 帳號, 主要用來建立並維護個人的課程倉儲與網站.&lt;/p&gt;
&lt;h1&gt;建立個人課程網站&lt;/h1&gt;
&lt;p&gt;網際內容管理的個人課程網站名稱為 wcm2024, 請先登入 Github 後, 連接至 https://github.com/mdecycu/cmsimde_site, 以此倉儲作為 Template 建立個人的 wcm2024 倉儲, 並將倉儲主分支設定 Github Pages 後, 檢查是否已經可以連線到個人的課程網頁.&lt;/p&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-14T17:40:21+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry></feed>