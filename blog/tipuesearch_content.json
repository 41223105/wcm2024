{"pages":[{"title":"About","text":"cmsimde 內容管理系統 倉儲: https://github.com/mdecycu/cmsimde_site 網站: https://mde.tw/cmsimde_site/ 簡報: https://mde.tw/cmsimde_site/reveal 網誌: https://mde.tw/cmsimde_site/blog","tags":"misc","url":"./pages/about/"},{"title":"期末報告","text":"期末報告 小遊戲 期末專案 \"猴子吃香蕉小遊戲\" ME:幫我用python寫出猴子吃香蕉的遊戲 用網頁方式呈現 chatgpt: 可以利用Python的Flask框架來建立一個簡單的網頁遊戲，讓猴子吃香蕉。這個遊戲會包括以下幾個部分： 伺服器端的Python代碼，用於處理網頁請求。 客戶端的HTML和JavaScript代碼，用於顯示遊戲和處理用戶互動。 首先，我們需要安裝Flask。你可以使用以下命令來安裝： pip install flask 然後，創建一個Flask應用程序，並撰寫HTML和JavaScript代碼。 Flask 伺服器端代碼（app.py） from flask import Flask, render_template app = Flask( name ) @app.route('/') def index(): return render_template('index.html') if name == ' main ': app.run(debug=True) 2. HTML和JavaScript代碼（templates/index.html） 在這個文件中，我們會撰寫HTML來顯示遊戲界面，並使用JavaScript來處理遊戲邏輯。 猴子吃香蕉遊戲 猴子吃香蕉小遊戲 ME:幫我用python寫出猴子吃香蕉的遊戲 用網頁方式呈現 chatgpt: 可以利用Python的Flask框架來建立一個簡單的網頁遊戲，讓猴子吃香蕉。這個遊戲會包括以下幾個部分： 1.伺服器端的Python代碼，用於處理網頁請求。 2.客戶端的HTML和JavaScript代碼，用於顯示遊戲和處理用戶互動。 首先，我們需要安裝Flask。你可以使用以下命令來安裝： -- pip install flask -- 然後，創建一個Flask應用程序，並撰寫HTML和JavaScript代碼。 1. Flask 伺服器端代碼（app.py） -- from flask import Flask, render_template app = Flask( name ) @app.route('/') def index(): return render_template('index.html') if name == ' main ': app.run(debug=True) -- HTML和JavaScript代碼（templates/index.html） 在這個文件中，我們會撰寫HTML來顯示遊戲界面，並使用JavaScript來處理遊戲邏輯。 -- 猴子吃香蕉遊戲 -- 運行項目 保存這些代碼到相應的文件（例如app.py和templates/index.html），然後運行app.py： -- python app.py -- 這樣你就可以在瀏覽器中打開http://127.0.0.1:5000/來玩這個簡單的猴子吃香蕉遊戲了。 這個遊戲是很基礎的，你可以根據需要進一步擴展，比如添加分數計算、多個香蕉、不同的關卡等。 因為問的問題不夠完整，沒有跑出要把東西放在哪邊，所以我又問了第二個問題 ME:告訴我要放在哪裡？ chatgpt: 當前的項目結構應該如下： -- monkey_banana_game/ │ ├── app.py └── templates/ └── index.html -- 1.步驟： 創建專案目錄： 在你的工作目錄下創建一個新的文件夾，例如monkey_banana_game。 2.創建 app.py 文件： 在monkey_banana_game文件夾內創建一個名為app.py的文件，並將以下內容複製到app.py中： -- from flask import Flask, render_template app = Flask( name ) @app.route('/') def index(): return render_template('index.html') if name == ' main ': app.run(debug=True) -- 3.創建 templates 目錄： 在monkey_banana_game文件夾內創建一個名為templates的文件夾。 4.創建 index.html 文件： 在templates文件夾內創建一個名為index.html的文件，並將以下內容複製到index.html中： -- 猴子吃香蕉遊戲 -- 5.運行 Flask 應用： 打開命令行工具，導航到monkey_banana_game文件夾，然後運行以下命令： -- python app.py -- 6.在瀏覽器中打開遊戲： 打開瀏覽器，訪問http://127.0.0.1:5000/，你就可以看到並玩這個簡單的猴子吃香蕉遊戲了。","tags":"期末","url":"./2024-Spring-期末-blog-tutorial.html"},{"title":"w14 課程內容","text":"網站內容整理 上課內容： 1.有關建立網站 2.Replit靜態網站檢視 3.建立Replit分組倉儲權限 4.Replit,Codespaces與Gitpods執行靜態與動態網站 5.複習前三週上課內容與git介紹","tags":"w14","url":"./2024-Spring-w14-blog-tutorial.html"},{"title":"w13 課程內容","text":"w13網際內容管理上課內容, 從單機猜數字遊戲與 AI 應用談起 使用 SSH 客戶端遠端登入 學員需要一個 SSH 客戶端來連接到主機。以下是使用不同操作系統的簡單說明： Windows 可以使用 PuTTY 或 Windows Terminal。 打開 PuTTY，輸入 stud.cycu.org 作為主機名，並輸入用戶名和初始密碼。 macOS 和 Linux 打開終端（Terminal）。 輸入以下命令： ssh 學號@stud.cycu.org 例如，如果學號是 s1234567，則輸入： ssh s1234567@stud.cycu.org 修改初始密碼 首次登入後，應立即修改初始密碼。可以使用 passwd 命令來修改： passwd 系統會提示輸入當前密碼，然後輸入並確認新密碼。 確保資料安全 提醒學員注意資料備份和安全： 定期備份重要數據。 不要將敏感信息存儲在公共目錄中。 使用安全的密碼和兩步驗證（如有可能）。","tags":"w13","url":"./2024-Spring-w13-blog-tutorial.html"},{"title":"w10 課程內容","text":"w10網際內容管理上課內容,說明如何在網頁中加入 Brython 程式應用 Brython 程式環境 將 brython_w_editor_html.txt 超文件內容放入網誌中, 即可得到下列內容. 若要放入動態網站, 則必須注意各引用頁面是由 cmsimde 目錄中啟動, 必須使用 brython_on_editor.txt 超文件格式.","tags":"w10","url":"./2024-Spring-w10-blog-tutorial.html"},{"title":"w9 課程內容","text":"期中課程整理 目的：利用網頁來管理與個人或專業領域應用相關的內容 網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中，只要有能夠執行 Python 的雲端或近端環境，開啟網頁編輯程式進行改版，上傳資料可在 Github 倉儲中透過 Pages 的全球資訊伺服器呈現網站內容。","tags":"w9","url":"./2024-Spring-w9-blog-tutorial.html"},{"title":"w8 課程內容","text":"w8 上課內容， 從教育的本質看網際內容管理課程的內容要點. 了解教育的本質、意義 教育的意義在於促進個人知識和技能的獲取、思維能力和人格的發展，並推動社會公平、文化傳承、公民意識的提高。它提升勞動力素質和國家競爭力，促進經濟繁榮和科技創新。同時，教育增強國際理解，推動可持續發展，對個人和社會均至關重要。","tags":"w8","url":"./2024-Spring-w8-blog-tutorial.html"},{"title":"w6 課程內容","text":"w6 上課內容， 說明如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法. 請根據第六週的網誌, 實際操作下列兩項議題: 根據您的專業, 就 git 的使用, 從與 ChatGPT 的對話, 將內容整理到個人的第六網誌, 其中包含: git 的發展歷史, 創作人的相關履歷, 以及一般相同專業人士如何利用 git 解決內容管理問題? 假如要在 Windows 實際 demo git client 與 git server, 該如何進行? 請將相關操作流程整理至個人第六週網誌中. git 的發展歷史 Git 的發展歷史可以追溯到2005年，當時Linux的創始人Linus Torvalds為了管理Linux核心開發而創建了Git版本控制系統。以下是Git的主要發展歷程： 2005年：Git 誕生。Linus Torvalds開始編寫 Git 作為管理 Linux 內核代碼的工具。他受到 BitKeeper 版本控制系統的啟發，但對於一些限制感到不滿，因此決定創建自己的版本控制系統。 2005年4月：Git 開始在 Linux 內核開發中使用。Torvalds將Linux內核的版本控制從BitKeeper轉移到Git。 2005年6月：Git 1.0版本發布。這是Git的首個正式穩定版本，標誌著Git正式進入廣泛使用的階段。 2008年：GitHub成立。GitHub是一個基於Git的代碼托管平台，為開發者提供了方便的代碼存儲、版本控制和協作功能。GitHub的出現進一步推動了Git的普及和發展。 2012年：Git 1.8.0版本發布。這是Git的一個重要版本，引入了許多新特性和改進，包括重寫的分支合併策略、子模組支持等。 2016年：Git 2.0版本發布。這個版本引入了一些重要的改進和更新，包括重新設計的設置系統、忽略規則的改進等。 至今：Git 不斷進行著更新和改進。每個新版本都帶來了更多的功能、性能優化和使用體驗改進，使得Git在軟件開發領域中得到廣泛應用。 git創作人Linus Torvalds的相關履歷 Linus Torvalds，Git 的創始人，是一位著名的計算機科學家和軟件工程師，最著名的貢獻是 Linux 操作系統的開發。以下是他的一些相關履歷： 早年生活和教育： Linus Benedict Torvalds 生於1969年12月28日，出生於芬蘭赫爾辛基。 他在赫爾辛基大學學習計算機科學，於1996年獲得碩士學位。 Linux 的創建： 在大學期間，他開始對操作系統感興趣，並開始編寫一個新的操作系統的核心。 1991年，他發布了 Linux 核心的第一個版本，這成為了 Linux 操作系統的開端。 Git 的誕生： 2005年，Torvalds為了管理 Linux 內核代碼的開發而創建了 Git 版本控制系統。 他受到 BitKeeper 版本控制系統的啟發，但對於一些限制感到不滿，因此決定創建自己的版本控制系統。 軟件工程師生涯： Torvalds 是一位極具影響力的軟件工程師，除了 Linux 和 Git 外，他還參與了許多其他開源項目。 他經常參加各種開發者活動和會議，並在開源社區中發揮著積極的作用。 榮譽與獎項： 2000年，他被《時代》雜誌列為「互聯網最重要的人物之一」。 2012年，他獲得了芬蘭國家技術獎。 他還獲得了許多其他獎項和榮譽，以表彰他在計算機科學領域的重要貢獻。 一般相同專業人士如何利用 git 解決內容管理問題? 對於一般的專業人士，尤其是軟件開發人員和其他技術人員來說，Git 是一個強大的工具，可以幫助他們解決內容管理問題。以下是一些一般相同專業人士如何利用 Git 解決內容管理問題的方式： 版本控制：Git 讓你能夠跟蹤和管理內容的各個版本。這對於文檔、代碼、配置文件等各種類型的內容都非常有用。你可以隨時回溯到之前的版本，比如當需要查找錯誤的起源時，或者需要恢復到之前的穩定狀態時。 分支和合併：Git 允許創建分支來獨立開發新功能或修復問題，而不會影響主要的開發分支。這樣可以同時進行多個功能的開發，而不會相互干擾。然後，你可以使用合併操作將這些分支合併回主要的開發線上。 協作：Git 提供了便捷的方式讓多個人協作開發同一個項目。通過將代碼庫克隆到本地，進行修改後再推送回原始代碼庫，不同團隊成員可以輕鬆地共享和合作。這對於團隊內部或跨團隊之間的合作都非常有用。 代碼審查：Git 可以與代碼審查工具結合使用，這使得團隊能夠進行代碼審查，從而提高代碼質量和可讀性。通過在代碼庫中創建分支，然後將分支中的代碼發送給同事進行審查，可以有效地進行代碼審查流程。 自動化流程：利用 Git 的 Hooks 功能，可以實現自動化的流程。例如，你可以設置 pre-commit hook，在提交代碼之前運行測試，從而確保提交的代碼是合格的。這樣可以提高代碼的質量並減少錯誤。 Git 是一個非常強大且靈活的工具，可以滿足各種內容管理需求。通過充分利用 Git 的功能，專業人士可以更有效地管理和協作開發項目，提高生產力和內容質量。 假如要在 Windows 實際 demo git client 與 git server, 該如何進行? 在 Windows 上進行 Git 客戶端和伺服器的實際演示相對容易，以下是一個簡單的步驟： 建立 Git 伺服器 安裝 Git： 如果尚未安裝 Git，請在 Windows 上下載並安裝 Git。你可以在 Git 官方網站 上找到最新版本。 創建 Git 儲存庫： 選擇一個文件夾作為你的 Git 儲存庫，然後右鍵單擊該文件夾，選擇\"Git Bash Here\"以打開 Git Bash。 初始化儲存庫： 在 Git Bash 中，運行以下命令初始化儲存庫： git init --bare 這將創建一個裸儲存庫，該儲存庫可用於克隆和推送代碼。 設置遠程連接： 在你的演示中，你需要告訴客戶端如何連接到此伺服器。假設你的伺服器位於本地，遠程 URL 可能是類似 file:///C:/path/to/your/repository.git 的格式。 使用 Git 客戶端 安裝 Git 客戶端： 如果尚未安裝 Git，請在 Windows 上下載並安裝 Git，就像在建立伺服器時所做的那樣。 克隆儲存庫： 打開命令提示符或 Git Bash，然後使用 git clone 命令克隆剛剛建立的儲存庫： git clone file:///C:/path/to/your/repository.git 進行修改： 在剛剛克隆的儲存庫中進行一些修改，比如新增文件、修改文件等。 提交變更： 使用以下命令提交你的變更： git add . git commit -m \"Your commit message\" 推送到伺服器： 使用以下命令將你的變更推送到伺服器： git push origin master 注意，這裡假設你將主分支命名為 master。如果你使用的是不同的分支名稱，請將其替換為適當的分支名稱。 這樣就完成了一個簡單的 Git 客戶端和伺服器的實際演示。這個示例可以讓你展示 Git 的基本功能，包括克隆、提交和推送。","tags":"w6","url":"./2024-Spring-w6-blog-tutorial.html"},{"title":"w5 課程內容","text":"w5 上課內容，以 iframe 嵌入先前的教學影片, 並摘要各影片內容. 將組員的個人倉儲納為分組倉儲的子模組 可以先 git status git submodule add (貼上自己的倉儲網站).git (輸入自己的學號) git add . git commit -m \"上傳子模組\" git push","tags":"w5","url":"./2024-Spring-w5-blog-tutorial.html"},{"title":"w4 課程內容","text":"w4 上課內容，複習前三週的課程內容, 並且介紹 git 與 cmsimde 的相關用法. 有關建立網站 cmsimde 套件有關動態與靜態網站的標題、啟動網址與埠號設定位於 init.py 程式檔案中, 若將 init.py 中的啟動網址設為外部 IP, 則此網際內容管理系統的編輯網站, 可直接連外. Replit 靜態網站檢視 下載 main2.txt 與 static.txt, 其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視. 另一方面, 若要取消先前執行 python3 main2.py, 只需要在 Shell 頁面按下 ctrl + c, c 代表 cancle 也就是取消. 然後若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵. Replit 建立分組倉儲權限 由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應, 因此若將分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號) Git Tutorial 第5組分組網站 1a-ag5 (repo)","tags":"w4","url":"./2024-Spring-w4-blog-tutorial.html"},{"title":"w3 課程內容","text":"w3 上課內容，除了 Replit, Github Codespaces, Gitpod 之外, 還介紹如何利用可攜系統維護個人與分組網站. 利用Gitpod維護倉儲 https://www.gitpod.io/ - gitpod的使用與 Codespaces 類似,每個月有 50 小時的免費使用時間, 可以使用 Github 帳號登入 利用 localhost 維護倉儲 透過 Windows 環境中的 USB 隨身碟, 配置可攜程式系統, 用來管理個人與分組的分組倉儲與網站, 可使用老師給的portable_2024.7z(密碼為:kmolab)","tags":"w3","url":"./2024-Spring-w3-blog-tutorial.html"},{"title":"w2 課程內容","text":"w2 上課內容，主要確認各學員是否完成 Github 中個人倉儲與網站的建立，並且除了 Replit 還導入利用 Github Codespaces 維護個人與分組網站. 利用 Github Classroom 建立分組網站 在 mdewcm2024 帳號下, 期中分組作業名稱為 1a,各班作業名稱必須有所區別, 而且各分組 Team 名稱也不能相同. 如何利用 Codespaces 維護網站 採用 Github Codespaces 維護網站的好處是, Visual Studio code 介面提供多終端機與多 ports 開啟功能, 在 Codespaces 中維護 wcm2024 的過程幾乎如同在 localhost Windows 10 或 11 的操作系統環境中進行.","tags":"w2","url":"./2024-Spring-w2-blog-tutorial.html"},{"title":"w1 課程內容","text":"w1 上課內容 建立個人的Github帳號 自行建立 Github 帳號, 主要用來建立並維護個人的課程倉儲與網站. 建立個人課程網站 網際內容管理的個人課程網站名稱為 wcm2024, 請先登入 Github 後, 連接至 https://github.com/mdecycu/cmsimde_site, 以此倉儲作為 Template 建立個人的 wcm2024 倉儲, 並將倉儲主分支設定 Github Pages 後, 檢查是否已經可以連線到個人的課程網頁.","tags":"w1","url":"./2024-Spring-w1.-blog-tutorial.html"},{"title":"2024 Spring 課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w1","url":"./2024-Spring-w1-blog-tutorial.html"}]}